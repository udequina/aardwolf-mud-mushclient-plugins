<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, November 23, 2015, 4:51 AM -->
<!-- MuClient version 4.84 -->

<!-- Plugin "dtrack_hits" generated by Plugin Wizard -->

<muclient>
<plugin
   name="dtrack_hits"
   author="Castiel"
   id="ee156c288af48c2f1a06a434"
   language="Lua"
   purpose="Shows more detailed dtrack info."
   save_state="y"
   date_written="2015-11-23 04:49:53"
   requires="4.84"
   version="1.0"
   >

</plugin>

<include name="constants.lua"/>

<aliases>
  <alias regexp="y" match="^dtr(a|ac|ack)?(?<hits> hits)?$" enabled="y" script="enableDtrackTriggers"></alias>
  <alias regexp="y" match="^dtr(a|ac|ack)? sort$" enabled="y" script="toggleSort"></alias>
</aliases>

<triggers>
  <!-- dtrack base captures -->
  <trigger group="dtrackBase" enabled="n" script="evalRounds" match="^Rounds      : \[(?<rounds>[0-9 ]+)\]$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackBase" enabled="n" script="evalSwings" match="^Swings      : \[(?<swings>[0-9 ]+)\]     Swings Per Round  : \[(?<swingsPerRound>[0-9 .]+)\]$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackBase" enabled="n" script="evalMisses" match="^Misses      : \[(?<total>[0-9 ]+)\]     \( Missed: (?<misses>[0-9]+), Dodged: (?<dodged>[0-9]+), Other: (?<other>[0-9]+)\)$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackBase" enabled="n" script="evalDamage" match="^Damage      : \[(?<damage>[0-9 ]+)\]     Damage Per Hit    : \[(?<damagePerHit>[0-9 .]+)\]$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackBase" enabled="n" script="evalSkillDamage" match="^Hits        : \[(?<hits>[0-9 ]+)\]     Damage            : \[(?<damage>[0-9 .]+)\]$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackBase" enabled="n" script="evalSkillAverage" match="^Average     : \[(?<average>[0-9 .]+)\]$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackBase" enabled="n" script="evalHits" match="^Hits        : \[(?<hits>[0-9 ]+)\]     Hit Percentage    : \[(?<hitPercent>[0-9 .]+)\]$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackBase" enabled="n" script="evalTypes" match="^   (?<type>Primary  |Secondary): \[(?<numOne>[0-9 ]+)\]        (Primary  |Secondary)      : \[(?<numTwo>[0-9 .]+)\]$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  
  <!-- dtrack "hits" captures -->
  <trigger group="dtrackHits" enabled="n" script="evalAttacks" match="^(?<attackName>Primary Attack|Second Attack |Third Attack  |Fourth Attack |Fifth Attack  |Sixth Attack  |Dual Wield    |Second Dual   |Third Dual    |Haste Attacks |Lightspeed    |Knife Attacks |Unarmed       ): \[(?<attacks>[0-9 ]+)\](   \(Instinct (?<instinct>[0-9 ]+)\))?$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
  <trigger group="dtrackHits" enabled="n" script="enableEating" match="^Hit Breakdown:$" omit_from_output="n" regexp="y" send_to="12" sequence="100"></trigger>

  <!-- dtrack "eating" capture [Removes "empty" lines] -->
  <trigger name="eating" enabled="n" match="^$" omit_from_output="y" regexp="y" send_to="12" sequence="100"></trigger>
</triggers>

<script>
<![CDATA[
  require "commas"

  local dtrackData = { rounds = 0, swings = 0, swingsPerRound = 0, hits = 0, hitPercent = 0.0, damage = 0, damagePerHit = 0, skillHits = 0, skillDamage = 0, skillAverage = 0, 
                       totalMisses = 0, misses = 0, dodged = 0, other = 0, attackData = {} }
  local sortMode = GetVariable("sortMode") or "Default"

  function resetDtrack()
    dtrackData = { rounds = 0, swings = 0, swingsPerRound = 0, hits = 0, hitPercent = 0.0, damage = 0, damagePerHit = 0,  skillHits = 0, skillDamage = 0, skillAverage = 0, 
                   totalMisses = 0, misses = 0, dodged = 0, other = 0, attackData = {} }
  end

  function toggleSort(name, line, wildcards)
    if sortMode == "Default" then
      ColourNote("white", "", "Damage Tracker will now sort hits by: ", "lime", "", "Attacks")
      sortMode = "Instinct"
    else
      ColourNote("white", "", "Damage Tracker will now sort hits by: ", "lime", "", "Instinct")
      sortMode = "Default"
    end
    SetVariable("sortMode", sortMode)
  end

  function evalRounds(name, line, wildcards) --@GRounds      @W: [ @Y 398310@W ]
    DoAfterSpecial(0.5, 'disableDtrackTriggers()', sendto.script)
    dtrackData.rounds = tonumber(wildcards.rounds)
    ColourNote("lime", "", "Rounds      ", "white", "", ": [ ", "yellow", "", commas(dtrackData.rounds), "white", "", " ]\n\r")
  end

  function evalDamage(name, line, wildcards) --@GDamage      @W: [ @Y3948074590@W ]     @GDamage Per Hit    @W: [ @Y1645.45 @W]
    dtrackData.damage = tonumber(wildcards.damage)
    dtrackData.damagePerHit = tonumber(wildcards.damagePerHit)
    ColourNote("lime", "", "Damage      ", "white", "", ": [ ", "yellow", "", string.format("%13s", commas(dtrackData.damage)), "white", "", " ]     ", "lime", "", "Damage Per Hit    ", "white", "", ": [ ", "yellow", "", string.format("%8s", commas(dtrackData.damagePerHit)), "white", "", " ]")
  end

  function evalSwings(name, line, wildcards) --@GSwings      @W: [ @Y2921327@W ]     @GSwings Per Round  @W: [ @Y  7.33 @W]
    dtrackData.swings = tonumber(wildcards.swings)
    dtrackData.swingsPerRound = wildcards.swingsPerRound
    ColourNote("lime", "", "Swings      ", "white", "", ": [ ", "yellow", "", string.format("%9s", commas(dtrackData.swings)), "white", "", " ]     ", "lime", "", "Swings Per Round  ", "white", "", ": [ ", "yellow", "", string.format("%8s", commas(dtrackData.swingsPerRound)), "white", "", " ]")
  end

  function evalHits(name, line, wildcards) --@GHits        @W: [ @Y2398742@W ]     @GHit Percentage    @W: [ @Y 82.11 @W]
    dtrackData.hits = tonumber(wildcards.hits)
    dtrackData.hitPercent = wildcards.hitPercent
    ColourNote("lime", "", "Hits        ", "white", "", ": [ ", "yellow", "", string.format("%9s", commas(dtrackData.hits)), "white", "", " ]     ", "lime", "", "Hit Percentage    ", "white", "", ": [ ", "yellow", "", string.format("%8s", commas(dtrackData.hitPercent)), "white", "", " ]")
  end
  
  function evalSkillDamage(name, line, wildcards) --@GHits        : [  728794 ]     Damage            : [ 2741188708 ]
    dtrackData.skillHits = tonumber(wildcards.hits)
    dtrackData.skillDamage = tonumber(wildcards.damage)
    ColourNote("lime", "", "Hits        ", "white", "", ": [ ", "yellow", "", string.format("%9s", commas(dtrackData.skillHits)), "white", "", " ]     ", "lime", "", "Damage            ", "white", "", ": [ ", "yellow", "", string.format("%8s", commas(dtrackData.skillDamage)), "white", "", " ]")
  end
  
  function evalSkillAverage(name, line, wildcards) --@GAverage     : [  728794 ]
    dtrackData.skillAverage = tonumber(wildcards.average)
    ColourNote("lime", "", "Average     ", "white", "", ": [ ", "yellow", "", string.format("%9s", commas(dtrackData.skillAverage)), "white", "", " ]")
  end

  function evalTypes(name, line, wildcards) --@w   Primary  @W: [ @w2254871@W ]     @w   Primary        @W: [ @w  5.66 @W]
    local tStr = string.format("   %s: [ %9s ]        %s      : [ %8s ]", wildcards.type, commas(tonumber(wildcards.numOne)), wildcards.type, commas(tonumber(wildcards.numTwo)))
    ColourNote("silver", "", tStr)
  end

  function evalMisses(name, line, wildcards) --@GMisses      @W: [ @Y 527987 @W]     ( Missed: 354880, Dodged: 173107, Other: 0)
    dtrackData.totalMisses = tonumber(wildcards.total)
    dtrackData.misses = tonumber(wildcards.misses)
    dtrackData.dodged = tonumber(wildcards.dodged)
    dtrackData.other = tonumber(wildcards.other)
    ColourNote("lime", "", "Misses      ", "white", "", ": [ ", "yellow", "", string.format("%9s", commas(dtrackData.totalMisses)), "white", "", " ]     ( Missed: " .. commas(dtrackData.misses) .. ", Dodged: " .. commas(dtrackData.dodged) .. ", Other: " .. commas(dtrackData.other) .. ")")
  end

  function evalAttacks(name, line, wildcards) --Passed: attackName, attacks, instinct
    local tAttack = rtrim(wildcards.attackName)

    if dtrackData.attackData[tAttack] == nil then
      dtrackData.attackData[tAttack] = { attacks = 0, instinct = 0 }
    end
    dtrackData.attackData[tAttack].attacks = tonumber(wildcards.attacks) or 0
    dtrackData.attackData[tAttack].instinct = tonumber(wildcards.instinct) or 0

    if tAttack == "Unarmed" then --Last one, time to print them out! This may need to be updated if dtrack is ever adjusted for future attacks being added/etc.
      local totalInstinct = 0

      for n, v in spairs(dtrackData.attackData, function(t,a,b) return t[a].attacks > t[b].attacks end) do
        totalInstinct = totalInstinct + v.instinct
      end
      ColourNote("lime", "", "\n\rInstinct Hits", "white", "", ": [ ", "yellow", "", commas(totalInstinct), "white", "", " ]     ", "lime", "", "Instinct Percent  ", "white", "", ": [ ", "yellow", "", string.format("%.2f", (totalInstinct/dtrackData.swings)*100), "white", "", " ]")

      ColourNote("white", "", "\n\r    Attack        # hits      instinct  instinct %  overall % w/o inst %")
      ColourNote("white", "", "--------------  ----------- ----------- ---------- ---------- ----------")

      if sortMode == "Instinct" then
        for n, v in spairs(dtrackData.attackData, function(t,a,b) return t[a].instinct > t[b].instinct end) do
          ColourTell("lime", "", string.format("%14s", n))
          ColourTell("white", "", ": [ ")
          ColourTell("yellow", "", string.format("%7s", commas(v.attacks)))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%7s", commas(v.instinct)))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%6.2f", (v.instinct/v.attacks)*100))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%6.2f", (v.attacks/dtrackData.swings)*100))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%6.2f", ((v.attacks-v.instinct)/(dtrackData.swings-v.instinct))*100))
          ColourTell("white", "", " ]\n\r")
        end
      else
        for n, v in spairs(dtrackData.attackData, function(t,a,b) return t[a].attacks > t[b].attacks end) do
          ColourTell("lime", "", string.format("%14s", n))
          ColourTell("white", "", ": [ ")
          ColourTell("yellow", "", string.format("%7s", commas(v.attacks)))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%7s", commas(v.instinct)))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%6.2f", (v.instinct/v.attacks)*100))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%6.2f", (v.attacks/dtrackData.swings)*100))
          ColourTell("white", "", " ] [ ")
          ColourTell("yellow", "", string.format("%6.2f", ((v.attacks-v.instinct)/(dtrackData.swings-v.instinct))*100))
          ColourTell("white", "", " ]\n\r")
        end
      end
      ColourTell("white", "", "\n\r")
    end
end

  function enableDtrackTriggers(name, line, wildcards)
    EnableTriggerGroup("dtrackBase", true)
    if wildcards.hits ~= nil then
      if string.lower(wildcards.hits) == " hits" then
        Send("dtrack hits")
        EnableTriggerGroup("dtrackHits", true)
      else
        Send("dtrack")
      end
    else
      Send("dtrack")
    end
  end

  function disableDtrackTriggers()
    EnableTriggerGroup("dtrackBase", false)
    EnableTriggerGroup("dtrackHits", false)
    EnableTrigger("eating", false)
  end

  function enableEating()
    EnableTrigger("eating", true)
  end

  function rtrim(s)
    local n = #s
    while n > 0 and s:find("^%s", n) do n = n - 1 end
    return s:sub(1, n)
  end

  function spairs(t, order)
    -- collect the keys
    local keys = {}
    for k in pairs(t) do keys[#keys+1] = k end

    -- if order function given, sort by it by passing the table and keys a, b,
    -- otherwise just sort the keys 
    if order then
       table.sort(keys, function(a,b) return order(t, a, b) end)
    else
       table.sort(keys)
    end

    -- return the iterator function
    local i = 0
    return function()
       i = i + 1
       if keys[i] then
          return keys[i], t[keys[i]]
       end
    end
 end

]]>
</script>


</muclient>