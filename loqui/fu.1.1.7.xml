<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, October 02, 2018, 4:49 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "fu" generated by Plugin Wizard -->

<muclient>
<plugin
   name="fu"
   author="Durel"
   id="b16d151337abc0f39a22a37b"
   language="Lua"
   purpose="Follow You -- Simplifies auto-following another character"
   save_state="y"
   date_written="2018-10-02 16:44:02"
   requires="5.06"
   version="1.0"
   >
<description trim="y">
<![CDATA[
The "Follow You" plugin provides a simple way to follow a tank after a short delay.
This helps you avoid aggressive mobs in your next room because they will see your
meatshield before they see you.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   expand_variables="y"
   keep_evaluating="y"
   ignore_case="y"
   match="^.*@meatShield (leaves|canters|gallops|crashes|dashes|zooms|flies|swoops|glides|darts|flits|slinks|marches|pads|scurries|scampers|skulks|slithers|sloshes|stomps|strides|jets|screams and charges) (north|south|east|west|up|down).$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.moveDetect("%2", false)</send>
  </trigger>

  <trigger
   enabled="y"
   expand_variables="y"
   keep_evaluating="y"
   ignore_case="y"
   match="^.*@meatShield (enters |steps into )(a |an |the )?(.*)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.enter("%3")</send>
  </trigger>

  <trigger
   enabled="y"
   expand_variables="y"
   keep_evaluating="y"
   ignore_case="y"
   match="^You start to follow (.*)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.newFollow("%1")</send>
  </trigger>

</triggers>


<!--  Aliases  -->

<aliases>
  <alias
   match="^[ ]*fu[ ]+(on|off|move|get|goto|version|help)[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
  local mode = Trim("%1") or "nil"

  if (mode == "on") then
    fu.on()
  elseif (mode == "off") then
    fu.off()
  elseif (mode == "move") then
    fu.move()   
  elseif (mode == "get") then
    fu.get()
  elseif (mode == "goto") then
    fu.goto()
  elseif (mode == "version") then
    fu.version()
  elseif (mode == "help") then
    fu.help()
  else
    fu.print("Unknown mode " .. mode)
  end -- if</send>
  </alias>

  <alias
   match="^[ ]*fu[ ]+set[ ]+([^ ]+)[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.set("%1")</send>
  </alias>

  <alias
   match="^[ ]*fu[ ]+pre([ ]+.*)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.preSet("%1")</send>
  </alias>

  <alias
   match="^[ ]*fu[ ]+post([ ]+.*)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.postSet("%1")</send>
  </alias>

  <alias
   match="^[ ]*fu[ ]+autohunt([ ]+.*)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.autohuntSet(Trim("%1"))</send>
  </alias>

  <alias
   match="^[ ]*fu[ ]+movement([ ]+.*)?$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.extraMoveSet(Trim("%1"))</send>
  </alias>

  <alias
   match="^[ ]*fu[ ]+commlog[ ]+(on|off)[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.commlogSet("%1")</send>
  </alias>
  
  <alias
   match="^[ ]*fu[ ]+verbose[ ]+(on|off)[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>fu.verboseSet("%1")</send>
  </alias>
  
  <alias
   match="^[ ]*fu(|[ ]+.*)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="1000"
  >
  <send>fu.help()</send>
  </alias>


</aliases>

<!--  Variables  -->


<!--  Script  -->


<script>
<![CDATA[

----------------------------------------------------------------------------------------------------------
-- Dependencies
----------------------------------------------------------------------------------------------------------

require "gmcphelper"
require "wait"
require "check"
require "tprint"

dofile(GetInfo(60) .. "aardwolf_colors.lua")


----------------------------------------------------------------------------------------------------------
-- Global vars and tables
----------------------------------------------------------------------------------------------------------

fu = {}

fu.name = "FU"
fu.ver  = "1.1.7"


----------------------------------------------------------------------------------------------------------
-- MUSH callbacks and hooks
----------------------------------------------------------------------------------------------------------

function OnPluginInstall()
  fu.init()
end -- OnPluginInstall


function OnPluginClose()
  fu.fini()
end -- OnPluginClose


function OnPluginConnect()
  --fu.print("OnPluginConnect!")
end -- OnPluginConnect


function OnPluginDisconnect()
  --fu.print("OnPluginDisconnect!")
end -- OnPluginDisconnect


function OnPluginEnable()
  --fu.print("OnPluginEnable!")
  fu.print("@GENABLED@W")
end -- OnPluginEnable


function OnPluginDisable()
  --fu.print("OnPluginDisable!")
  fu.print("@RENABLED@W")
end -- OnPluginDisable


----------------------------------------------------------------------------------------------------------
-- Plugin init/de-init
----------------------------------------------------------------------------------------------------------

function fu.init()

  -- Display the helpfile when the plugin loads
  fu.help()

end -- fu.init


function fu.fini()
  -- placeholder for now...
end -- fu.fini


----------------------------------------------------------------------------------------------------------
-- Plugin modes
----------------------------------------------------------------------------------------------------------

fu.onPkg = nil
function fu.on()
  if (fu.onPkg == nil) then
    fu.onPkg = {}
    fu.onPkg.timeout = 15
    wait.make(fu.onCR)
  else
    fu.print("Skipping \"@Cfu on@w\" request: another request is pending")
  end -- if
end -- fu.on


function fu.onCR()
  if (fu.onPkg == nil) then
    fu.error("fu.onCR: fu.onPkg is nil!?!")
    return
  end -- if

  local timeout = tonumber(fu.onPkg.timeout or "")
  if (timeout == nil) then
    fu.error("fu.onCR: Non-numeric timeout value \"" .. (timeout or "nil") .. "\" provided")
    fu.onPkg = nil
    return
  end -- if

  fu.print("Following self...")
  Execute("follow self")

  -- Wait to get confirmation that the player is actually following self.  We don't want to off-follow
  -- if the player is stacked and still following someone.
  local line, wildcards = wait.regexp("^(" ..
                                           "You stop following .*|" ..
                                           "You are not following anyone.|" ..
                                           "You dream about being able to follow." ..
                                      ")$",
                                      15, trigger_flag.OmitFromOutput)

  if (line == nil) or (line == "") then
    fu.error("Timed out after @C" .. timeout .. "@w seconds while attempting to follow self") 
  else
    if (line == "You dream about being able to follow.") then
      fu.print("@YSKIP@w You are asleep.  Please manually \"@Cfollow self@w\" when you wake up.")
    end -- if

    SetVariable("fuEnabled", "1")
    fu.print("Follow mode is @GENABLED@w")
  end -- if

  fu.onPkg = nil
  return

end -- fu.onCR


fu.offPkg = nil
function fu.off()
  if (fu.offPkg == nil) then
    fu.offPkg = {}
    fu.offPkg.timeout = 15
    wait.make(fu.offCR)
  else
    fu.print("Skipping \"@Cfu off@w\" request: another request is pending")
  end -- if
end -- fu.off  


function fu.offCR()
  if (fu.offPkg == nil) then
    fu.error("fu.offCR: fu.offPkg is nil!?!")
    return
  end -- if

  local timeout = tonumber(fu.offPkg.timeout or "")
  if (timeout == nil) then
    fu.error("fu.offCR: Non-numeric timeout value \"" .. (timeout or "nil") .. "\" provided")
    fu.offPkg = nil
    return
  end -- if

  SetVariable("fuEnabled", "0")
  fu.print("Follow mode is @RDISABLED@w")

  fu.offPkg = nil
  return

end -- fu.offCR


function fu.isEnabled()
  if (GetVariable("fuEnabled") == "1") then
    return true
  else
    return false
  end -- if
end -- fu.isEnabled


function fu.set(name)
  if (name == nil) or (name == "") then
    fu.print("fu.set: Missing name")
  else
    SetVariable("meatShield", name)
    fu.print("Set meatShield to \"@C" .. name .. "@w\"")
  end -- if
end -- fu.set


function fu.get()
  local meatShield = fu.getMeatShield()

  if (meatShield == nil) or (meatShield == "") then
    fu.print("Meatshield name is not yet set")
  else
    fu.print("Current meatShield is \"@C" .. meatShield .. "@w\"")
  end -- if
end -- fu.get


function fu.getMeatShield()
  return GetVariable("meatShield") or ""
end -- fu.get


function fu.goto()
  if fu.isEnabled() then
    local meatShield = GetVariable("meatShield")

    if (meatShield ~= nil) and (meatShield ~= "") then
      local autohuntCmd = fu.autohuntGet() or ""
      if (autohuntCmd ~= nil) and (autohuntCmd ~= "") then
        Execute(autohuntCmd .. " " .. meatShield)
      else
        fu.print("Autohunt command is not defined")
      end -- if
    end -- if

  end -- if
end -- fu.goto


function fu.preSet(commands)
  local preCommands = Trim(commands or "")
  SetVariable("fuPreCommands", preCommands)

  fu.print("Pre-movement commands = \"" .. preCommands:gsub("@", "@@") .. "\"")
end -- fu.preSet


function fu.preGet()
  return GetVariable("fuPreCommands") or ""
end -- fu.preGet


function fu.postSet(commands)
  local postCommands = Trim(commands or "")
  SetVariable("fuPostCommandsV2", postCommands)

  fu.print("Post-movement commands = \"" .. postCommands:gsub("@", "@@") .. "\"")
end -- fu.postSet


function fu.postGet()
  return GetVariable("fuPostCommandsV2") or ""
end -- fu.postGet


function fu.autohuntSet(commands)
  local autohuntCommand = Trim(commands or "")
  SetVariable("fuAutohuntCommand", autohuntCommand)

  fu.print("Autohunt command = \"" .. autohuntCommand .. "\"")
end -- fu.autohuntSet


function fu.autohuntGet()
  return GetVariable("fuAutohuntCommand") or ""
end -- fu.autohuntGet


function fu.extraMoveSet(extraMovement)
  local autohuntCommand = Trim(commands or "")
  SetVariable("fuExtraMovement", extraMovement)

  fu.print("Extra movement set to \"@c" .. extraMovement .. "@w\"")
end -- fu.extraMoveSet


function fu.extraMoveGet()
  return GetVariable("fuExtraMovement") or ""
end -- fu.extraMoveGet


function fu.version()
  fu.print("Version " .. fu.ver)
end -- fu.version


function fu.help()

fu.printColors([[
@x039----------------------------------------------------------------------------@w
@x083Follow You: Follower assistant@w
@x039----------------------------------------------------------------------------@w

    @wfu@W [on|off]         @x173-- Turn follow mode on or off

    @wfu@W move             @x173-- Move in the direction of your meatshield

    @wfu@W set [name]       @x173-- Set the name of your current meatshield
    @wfu@W get              @x173-- Print the name of your current meatshield

    @wfu@W goto             @x173-- Auto-hunt to your current meatshield
    @wfu@W autohunt [cmd]   @x173-- Command to autohunt (e.g., "ah")
    @wfu@W movement [move]  @x173-- Extra movement command

    @wfu@W pre  [cmds]      @x173-- Optional command(s) to run before following
    @wfu@W post [cmds]      @x173-- Optional command(s) to run after following

    @wfu@W verbose [on|off] @x173-- Report movement and pre/post commands@w
    @wfu@W commlog [on|off] @x173-- Mirror messages to the commlog@w

    @wfu@W version          @x173-- Report the current version of this plugin
    @wfu@W help             @x173-- Display the usage you're reading right now...

@x039----------------------------------------------------------------------------@w
]])

end -- fu.help

fu.movement = nil
fu.isCustom = nil

function fu.moveDetect(movement, isCustom)
  local meatShield = fu.getMeatShield()

  if fu.isEnabled() and fu.isVerbose() then
    fu.print("Meatshield @C" .. (fu.getMeatShield() or "nil") .. " @wmoved: @W" .. (movement or "nil") .. "@w")
  end -- if

  fu.movement = movement
  fu.isCustom = isCustom
end -- fu.moveDetect


function fu.move()

  local movement = fu.movement
  local isCustom = fu.isCustom

  fu.movement = nil
  fu.isCustom = nil

  if fu.isEnabled() then
    local meatShield = fu.getMeatShield()

    if (movement == nil) or (movement == "") then
      fu.print("I don't know where @C" .. (meatShield or "nil") .. "@w went!")
    else

      local preCommands = fu.preGet()
      if (preCommands ~= nil) and (preCommands ~= "") then
        preCommands = string.gsub(preCommands, "@meat[sS]hield", meatShield)

        if fu.isVerbose() then
          fu.print("Executing pre-movement commands: @W" .. preCommands .. "@w")
        end -- if

        Execute(preCommands)
      end -- if

      local extraMovement = fu.extraMoveGet()
      if (not isCustom) and (extraMovement ~= nil) and (extraMovement ~= "") then
        movement = extraMovement .. " " .. movement
      end -- if

      if fu.isVerbose() then
        fu.print("Following @C" .. meatShield .. "@w: @W" .. (movement or "nil") .. "@w")
      end -- if

      Execute(movement)

      local postCommands = fu.postGet()
      if (postCommands ~= nil) and (postCommands ~= "") then
        postCommands = string.gsub(postCommands, "@meat[sS]hield", meatShield)

        if fu.isVerbose() then
          fu.print("Executing post-movement commands: @W" .. postCommands .. "@w")
        end -- if

        Execute(postCommands)
      end -- if

    end -- if
  end -- if

end -- fu.move


fu.portals = {}
fu.portals["gigantic slingshot, ready for another trip down the Avalanche Slalom!"] = "up"
fu.portals["Iced Fish Hatchery."] = "east"
fu.portals["Chutes and Empty Bladders."] = "south"
fu.portals["King of the Kill."] = "west"
fu.portals["spiralling stairway and disappears."] = "enter stairway"


function fu.enter(portalLine)
  if (not fu.isEnabled()) or (portalLine == nil) or (portalLine == "") then
    return
  end -- if
  
  local moveCmd = fu.portals[portalLine] or ""
  if (moveCmd == nil) or (moveCmd == "") then
    -- Use the first word in the portal line if we don't specifically know this portal
    local portalName = portalLine:gsub("^(.-) .*$", "%1")
    if (portalName ~= "into") then
      moveCmd = "enter " .. portalName
      --fu.print("FIXME DEBUG: Unknown portal: attempting to \"" .. moveCmd .. "\" due to line \"" .. portalLine .. "\"")
    end -- if
  end -- if

  if (moveCmd ~= "") then
    --fu.print("FIXME DEBUG: Attempting to make custom move \"" .. moveCmd .. "\"")
    fu.movement = moveCmd
    fu.isCustom = true     -- it is a custom movement, not just a simply direction

    if fu.isVerbose() then
      fu.print("Meatshield @C" .. (fu.getMeatShield() or "nil") .. " @wmoved: @W" ..
               (fu.movement or "nil") .. "@w")
    end -- if

  end -- if

end -- fu.enter


function fu.newFollow(leader)
  if fu.isEnabled() then
--    fu.print("Re-following self (instead of @C" .. (leader or "nil") .. "@w) because FU is enabled")
--    Execute("follow self")
  end -- if

end -- fu.newFollow


----------------------------------------------------------------------------------------------------------
-- Verbose access
----------------------------------------------------------------------------------------------------------

function fu.verboseSet(enable)
  if (enable ~= "on") and (enable ~= "off") then
    fu.error("fu.verboseSet: invalid verbose mode \"" .. (enable or "nil") .. "\"")
    return
  end -- if

  SetVariable("verboseState", enable)

  local msg
  if (enable == "on") then
    msg = "@GENABLED@w"
  else
    msg = "@RDISABLED@w"
  end -- if

  fu.print("Verbose logging is " .. msg)

end -- fu.verboseSet


function fu.verboseGet()
  return (GetVariable("verboseState") or "")
end -- fu.verboseGet


function fu.isVerbose()
  if (fu.verboseGet() == "on") then
    return true
  else
    return false
  end -- if
end -- fu.isVerbose


----------------------------------------------------------------------------------------------------------
-- Commlog access
----------------------------------------------------------------------------------------------------------

function fu.commlogSet(enable)
  if (enable ~= "on") and (enable ~= "off") then
    fu.error("fu.commlogSet: invalid commlog mode \"" .. (enable or "nil") .. "\"")
    return
  end -- if

  SetVariable("commlogState", enable)

  local msg
  if (enable == "on") then
    msg = "@GENABLED@w"
  else
    msg = "@RDISABLED@w"
  end -- if

  fu.print("Mirroring to communication log is " .. msg)

end -- fu.commlogSet


function fu.commlogGet()
  return (GetVariable("commlogState") or "")
end -- fu.commlogGet


----------------------------------------------------------------------------------------------------------
-- Core helper functions
----------------------------------------------------------------------------------------------------------

function fu.printFormat(msg)
  local formattedMsg = ""

  if (msg ~= nil) and (msg ~= "") then

    local outerColor = "@x39"
    local innerColor = "@x83"

    formattedMsg = outerColor .. "[" .. innerColor .. fu.name .. outerColor .. "]@w " .. msg .. "@w"
  end -- if

  return formattedMsg
end -- fu.printFormat


function fu.printColors(msg)
  print(AnsiNote(stylesToANSI(ColoursToStyles(msg))))
end -- fu.printColors


function fu.print(msg)
  if (msg ~= nil) and (msg ~= "") then
    local formattedMsg = fu.printFormat(msg)
    fu.printColors(formattedMsg)

    -- If the user wants us to mirror messages to the commlog, do it :)
    local commlogState = fu.commlogGet()
    if (commlogState == "on") then
      fu.commLog(formattedMsg)
    end -- if
  end -- if

end -- fu.print()


function fu.error(msg)
  if (msg ~= nil) and (msg ~= "") then
    fu.print("@RERROR@w " .. msg)
  end -- if
end -- fu.error


function fu.commLog(msg)
  local clPlugin   = "b555825a4a5700c35fa80780"
  local clFunction = "storeFromOutside"

  if (msg == nil) or (msg == "") then
    print("fu.commLog: Missing message parameter")
    return error_code.eBadParameter
  end -- if

  local retval = CallPlugin(clPlugin, clFunction, msg)

  if (retval == error_code.eNoSuchPlugin) then
    print("fu.commLog: target plugin does not exist")

  elseif (retval == error_code.ePluginDisabled) then
    print("fu.commLog: target plugin is disabled")

  elseif (retval == error_code.eNoSuchRoutine) then
    print("fu.commLog: target routine does not exist")

  elseif (retval == error_code.eErrorCallingPluginRoutine) then
    print("fu.commLog: error calling plugin routine")

  elseif (retval ~= error_code.eOK) then
    print("fu.commLog: Unknown return value from CallPlugin: " .. (retval or "nil"))

  end -- if

  return retval
end -- fu.commLog


]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="fu:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
