<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, October 09, 2018, 9:04 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Aard_Conceal_Bot" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aard_Conceal_Bot"
   author="Endymion"
   id="cd3031f6006eddd3c544cd1d"
   language="Lua"
   purpose="Conceal all items if possible."
   date_written="2018-10-09 21:04:05"
   requires="4.30"
   version="1.0"
   >

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   match="^\{invdetails\}$|^\{\/(?<nd>invdetails)\}$"
   script="start_end_invdetails"
   regexp="y"
   sequence="100"	
   group="invdetails"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\{invheader\}(?<id>.*)\|(?<level>.*)\|(?<type>.*)\|(?<worth>.*)\|(?<weight>.*)\|(?<wear>.*)\|(?<flags>.*)\|(?<owner>.*)\|(?<clan>.*)\|(?<something>.*)\|(?<timer>.*)\|(?<somethingelse>.*)\|\|(?<score>.*)$"
   script="inv_header"
   regexp="y"
   sequence="100"
   group="invdetails"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\{(statmod|weapon|resistmod|spells|enchant|container|furniture|drink|food)\}.+$"
   regexp="y"
   sequence="100"
   group="invdetails"
   omit_from_output="y"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="^\{(invdata|eqdata)\}$|^\{\/(?<nd>(invdata|eqdata))\}$"
   script="start_end_invdata"
   regexp="y"
   sequence="100"
   group="invdata"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?<id>\d+),(?<flags>[A-Z]+)?,(?<name>.+),(?<level>\d+),(?<type>\d+),(?<unique>\d),(?<worn>[\-0-9]+),(?<timer>[\-0-9]+)$"
   script="invdata_line"
   regexp="y"
   sequence="100"
   group="invdata"
   omit_from_output="y"
  >
  </trigger>
  
  
  <trigger
   enabled="n"
   match="^.+ is already concealed\.$"
   script="already"
   regexp="y"
   sequence="100"
   group="conceal"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^.+ is now cloaked from prying eyes\.$"
   script="concealed"
   regexp="y"
   sequence="100"
   group="conceal"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You cannot conceal .+\.$"
   script="cant"
   regexp="y"
   sequence="100"
   group="conceal"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You do not know a 'conceal' spell\.$"
   script="no_conceal"
   regexp="y"
   sequence="100"
   group="conceal"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You failed to conceal .+\.$"
   script="failed"
   regexp="y"
   sequence="100"
   group="conceal"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You lost your concentration while trying to cast conceal\.$"
   script="retry"
   regexp="y"
   sequence="100"
   group="conceal"
   omit_from_output="y"
  >
  </trigger>
  
  <trigger
   enabled="n"
   regexp="y"
   match="^$"
   sequence="100"
   name="next_blank_line"
   script="next_blank_line"
   omit_from_output="y"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="^conceal all(?<nopots> nopots)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="start"
  >
  </alias>
  <alias
   match="^conceal resume$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="retry"
  >
  </alias>
  <alias
   match="^conceal help$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="loaded"
  >
  </alias>
  <alias
   match="^conceal get( (?<which>drop|bag (?<bag>[\d\w\.]+)))?$"
   enabled="y"
   regexp="y"
   sequence="100"
   script="get_all"
  >
  </alias>
</aliases>

<!--  Timers  -->

<timers>
	<timer
		name="timer_inform"
		enabled="n" 
		second="5" 
		offset_second="0.00"
		script="inform_status"
	>
	</timer>
</timers>

<!--  Script  -->


<script>
<![CDATA[
require "tprint"
require "serialize"

local items  -- id = {flags, container}
local container
local this
local results = {}
local cnt
local inform
local doing  -- for repeat casts
local nopots
local nolocate = {} -- table id ids that are nolocate

local pvar = GetVariable("nolocate") or ""
if pvar ~= "" then
	nolocate = loadstring("return "..pvar)()
end

function start(name, line, args)
	if args.nopots ~= "" then
		nopots = true
	else
		nopots = false
	end
	ColourNote("silver", "", "\nChecking all your items to conceal. Please wait...")
	EnableTimer("timer_inform", true)
	ResetTimer("timer_inform")
	results = {cant = {}, already = {}, concealed = {}, failed = {}, didnt = {}, no_conceal = {}}
	cnt = 0
	items = {}
	container = ""
	EnableTriggerGroup("invdata", true)
	SendNoEcho("eqdata ansi")
end

function next_container()
	for i, item in ipairs(items) do
		if item.type == "11" and item.checked == false and item.container == "" then
			item.checked = true
			--ColourNote("silver", "", "Checking container "..item.id..".")
			container = item.id
			EnableTriggerGroup("invdata", true)
			SendNoEcho("invdata "..item.id.." ansi")
			return
		end
	end
	--ColourNote("silver", "", "All done.")
	check_next()
	--tprint(items)
end

function start_end_invdata(name, line, args)
	if args.nd ~= "" then
		--ColourNote("silver", "", "Done.")
		EnableTriggerGroup("invdata", false)
		EnableTrigger("next_blank_line", true)
		if args.nd == "eqdata" then
			EnableTriggerGroup("invdata", true)
			SendNoEcho("invdata ansi")
		else
			next_container()
		end
	end
end

function invdata_line(name, line, args)
	--if args.id == "2029381981" then
	--	ColourNote("silver", "", args.name)
	--end
	if args.worn ~= "-1" then
		table.insert(items, {id = args.id, name = args.name, type = args.type, done = false, level = args.level, container = "worn", checked = false})
	else
		table.insert(items, {id = args.id, name = args.name, type = args.type, done = false, level = args.level, container = container, checked = false})
	end
end

function check_next()
	for i, item in ipairs(items) do
		cnt = i
		if item.done == false then
			this = item
			if not nolocate[item.id] or nolocate[item.id] ~= "done" then
				item.done = true
				--if i > 100 then
				--	all_done()
				--	return
				--end
				if item.container ~= "" then
					if item.container == "worn" then
						SendNoEcho("remove "..item.id)
					else
						SendNoEcho("get "..item.id.." "..item.container)
					end
				end
				EnableTriggerGroup("invdetails", true)
				SendNoEcho("invdetails "..item.id)
				return
			else
				item.done = true
				table.insert(results.already, this)
			end
		end
	end
	all_done()
end

function inv_header(name, line, args)
	flags = args.flags
	--ColourNote("silver", "", "flags: "..flags)
end

function start_end_invdetails(name, line, args)
	if args.nd ~= "" then
		EnableTriggerGroup("invdetails", false)
	else
		return
	end
	
	DoAfterSpecial(.2, "check_concealed()", 12)
end

function check_concealed()
	if not string.find(flags, "nolocate") then
		if nopots and (this.type == "2" or this.type == "8" or this.type == "19") then
			table.insert(results.didnt, this)
			item_done()
		else
			EnableTriggerGroup("conceal", true)
			doing = "cast conceal "..this.id
			SendNoEcho(doing)
		end
	else
		already()
	end
end

function next_blank_line()
	EnableTrigger("next_blank_line", false)
end

function already()
	table.insert(results.already, this)
	nolocate[this.id] = "done"
	item_done()
end

function no_conceal()
	table.insert(results.no_conceal, this)
	nolocate[this.id] = "cant"
	item_done()
end

function cant()
	table.insert(results.cant, this)
	nolocate[this.id] = "cant"
	item_done()
end

function concealed()
	table.insert(results.concealed, this)
	nolocate[this.id] = "done"
	item_done()
end

function retry()
	SendNoEcho(doing)
end

function failed()
	table.insert(results.failed, this)
	nolocate[this.id] = "failed"
	item_done()
end

function item_done()
	EnableTriggerGroup("conceal", false)
	if this.container ~= "" then
		if this.container == "worn" then
			SendNoEcho("wear "..this.id)
		else
			SendNoEcho("put "..this.id.." "..this.container)
		end
	end
	if inform then
		ColourNote("silver", "", "\nConcealing items...  "..cnt.." of "..#items.."\n")
		inform = false
	end
	check_next()
end

function all_done()
	SaveState()
	EnableTimer("timer_inform", false)
	ColourNote("silver", "", "Checked "..#items.." items.")
	ColourNote("silver", "", "Concealed "..#results.concealed.." items.")
	ColourNote("silver", "", #results.already.." items were already concealed.")
	ColourNote("silver", "", #results.cant.." items could not be concealed.")
	ColourNote("silver", "", #results.no_conceal.." items could not be concealed because you don't have that spell yet.")
	ColourNote("silver", "", #results.failed.." items failed to conceal due to level.")
	ColourNote("silver", "", #results.didnt.." potions, pills, or scrolls were not concealed, but were skipped.")
	show_cant()
end

function OnPluginSaveState()
	SetVariable("nolocate", serialize.save_simple(nolocate))
end

function show_cant()
	if #results.no_conceal > 0 then
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		ColourNote("silver", "", "Items that couldn't be concealed because you don't have that spell yet:")
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		for i, item in ipairs(results.no_conceal) do
			if item.container ~= "" then
				if item.container == "worn" then
					ColourTell("darkred", "", "[")
					Hyperlink("remove "..item.id, "get", "Remove this item!", "silver", "", false)
					ColourTell("darkred", "", "] ")
					ColourNote("silver", "", string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", item.container), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
				else
					ColourTell("darkred", "", "[")
					Hyperlink("get "..item.id.." "..item.container, "get", "Get this item!", "silver", "", false)
					ColourTell("darkred", "", "] ")
					ColourNote("silver", "", string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", item.container), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
				end
			else
				ColourNote("silver", "", "      "..string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", "inventory"), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
			end
		end
		ColourNote("darkred", "", "------------------------------------------------------------------------")
	end
	if #results.cant > 0 then
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		ColourNote("silver", "", "Items that couldn't be concealed:")
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		for i, item in ipairs(results.cant) do
			if item.container ~= "" then
				if item.container == "worn" then
					ColourTell("darkred", "", "[")
					Hyperlink("remove "..item.id, "get", "Remove this item!", "silver", "", true)
					ColourTell("darkred", "", "] ")
					ColourNote("silver", "", string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", item.container), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
				else
					ColourTell("darkred", "", "[")
					Hyperlink("get "..item.id.." "..item.container, "get", "Get this item!", "silver", "", true)
					ColourTell("darkred", "", "] ")
					ColourNote("silver", "", string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", item.container), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
				end
			else
				ColourNote("silver", "", string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", "inventory"), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
			end
		end
		ColourNote("darkred", "", "------------------------------------------------------------------------")
	end
	if #results.failed > 0 then
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		ColourNote("silver", "", "Items that couldn't be concealed due to level:")
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		for i, item in ipairs(results.failed) do
			if item.container ~= "" then
				if item.container == "worn" then
					ColourTell("darkred", "", "[")
					Hyperlink("remove "..item.id, "get", "Remove this item!", "silver", "", true)
					ColourTell("darkred", "", "] ")
					ColourNote("silver", "", string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", item.container), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
				else
					ColourTell("darkred", "", "[")
					Hyperlink("get "..item.id.." "..item.container, "get", "Get this item!", "silver", "", true)
					ColourTell("darkred", "", "] ")
					ColourNote("silver", "", string.format("%-11s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", item.container), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
				end
			else
				ColourNote("silver", "", string.format("%-20s", item.id), "gray", "", " in ", "silver", "", string.format("%-11s", "inventory"), "gray", "", "[Lvl "..string.format("%-3s", item.level).." "..item.name.."]")
			end
		end
		ColourNote("darkred", "", "------------------------------------------------------------------------")
	end
	if #results.didnt > 0 then
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		ColourNote("silver", "", "Potions, pills, and scrolls that weren't concealed:")
		ColourNote("darkred", "", "------------------------------------------------------------------------")
		local didnt = {}
		for i, item in ipairs(results.didnt) do
			if not didnt[item.name] then
				didnt[item.name] = {}
				didnt[item.name].count = 1
				didnt[item.name].level = item.level
			else
				didnt[item.name].count = didnt[item.name].count + 1
			end
		end
		for name, item in pairs(didnt) do
			ColourNote("silver", "", string.format("%3s", item.count).." x [Lvl "..string.format("%-3s", item.level).." "..name.."]")
		end
		ColourNote("darkred", "", "------------------------------------------------------------------------")
	end
end

function inform_status()
	inform = true
end

function get_all(name, line, args)
	local tot = 0
	if results.no_conceal then
		for i, item in ipairs(results.no_conceal) do
			tot = tot + 1
			if item.container ~= "" then
				if item.container == "worn" then
					DoAfterSpecial((.2 * tot), "remove "..item.id, 10)
				else
					DoAfterSpecial((.2 * tot), "get "..item.id.." "..item.container, 10)
				end
			end
			if args.which == "drop" then
				DoAfterSpecial((.2 * tot), "unkeep "..item.id, 10)
				DoAfterSpecial((.2 * tot), "drop "..item.id, 10)
			elseif args.which ~= "" then
				DoAfterSpecial((.2 * tot), "put "..item.id.." "..args.bag, 10)
			end
		end
	end
	if results.cant then
		for i, item in ipairs(results.cant) do
			tot = tot + 1
			if item.container ~= "" then
				if item.container == "worn" then
					DoAfterSpecial((.2 * tot), "remove "..item.id, 10)
				else
					DoAfterSpecial((.2 * tot), "get "..item.id.." "..item.container, 10)
				end
			end
			if args.which == "drop" then
				DoAfterSpecial((.2 * tot), "unkeep "..item.id, 10)
				DoAfterSpecial((.2 * tot), "drop "..item.id, 10)
			elseif args.which ~= "" then
				DoAfterSpecial((.2 * tot), "put "..item.id.." "..args.bag, 10)
			end
		end
	end
	if results.failed then
		for i, item in ipairs(results.failed) do
			tot = tot + 1
			if item.container ~= "" then
				if item.container == "worn" then
					DoAfterSpecial((.2 * tot), "remove "..item.id, 10)
				else
					DoAfterSpecial((.2 * tot), "get "..item.id.." "..item.container, 10)
				end
			end
			if args.which == "drop" then
				DoAfterSpecial((.2 * tot), "unkeep "..item.id, 10)
				DoAfterSpecial((.2 * tot), "drop "..item.id, 10)
			elseif args.which ~= "" then
				DoAfterSpecial((.2 * tot), "put "..item.id.." "..args.bag, 10)
			end
		end
	end
	if tot == 0 then
		ColourNote("red", "", "\nNo non-concealable items found.  Did you ", "white", "", "conceal all", "red", "", " first?\n")
	end
end

function loaded()
	ColourNote("red", "", "\n    Conceal bot loaded. Submit ", "white", "", "conceal all", "red", "", " to initiate the process.")
	ColourNote("red", "", " ** ", "yellow", "", "Make sure your detects will stay up for about 10 minutes while it works.", "red", "", " **")
	ColourNote("red", "", "    If you run out of mana or detects, submit ", "white", "", "conceal resume", "red", "", " to resume the process.")
	ColourNote("red", "", "    Submit ", "white", "", "conceal all nopots", "red", "", " to skip concealing all potions, pills, and scrolls.")
	ColourNote("red", "", "    Submit ", "white", "", "conceal get drop", "red", "", " to get/drop all non-concealable items from the last run.")
	ColourNote("yellow", "", "      ** Warning", "red", "", " this will unkeep and drop items regardless of what they are!!")
	ColourNote("red", "", "    Submit ", "white", "", "conceal get bag <bag ID>", "red", "", " to put all non-concealable items from the last run into a bag.")
	ColourNote("red", "", "    Submit ", "white", "", "conceal help", "red", "", " to see this help file.\n")
end

DoAfterSpecial(1, "loaded()", 12)

]]>
</script>


</muclient>
