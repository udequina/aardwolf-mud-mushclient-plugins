<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, January 22, 2019, 124:52 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "cusp" generated by Plugin Wizard -->

<muclient>
<plugin
   name="cusp"
   author="Durel"
   id="b16d151337abc0f39a23c37b"
   language="Lua"
   purpose="Toggles noexp when necessary to allow a campaign each level"
   save_state="y"
   date_written="2018-10-02 16:44:02"
   requires="5.06"
   version="1.0"
   >
<description trim="y">
<![CDATA[
The CUSP plugin toggles noexp as necessary in order to provide one campaign
per level.  See "cusp help" for details.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<!--  Aliases  -->

<aliases>
  <alias
   match="^[ ]*cusp[ ]+(on|off|version|help)[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
  local mode = Trim("%1") or "nil"

  if (mode == "on") then
    cusp.on()
  elseif (mode == "off") then
    cusp.off()
  elseif (mode == "version") then
    cusp.version()
  elseif (mode == "help") then
    cusp.help()
  else
    cusp.print("Unknown mode " .. mode)
  end -- if</send>
  </alias>

  <alias
   match="^[ ]*cusp[ ]+tnl([ ]+[0-9]+)?[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>cusp.tnl(Trim("%1"))</send>
  </alias>

  <alias
   match="^[ ]*cusp[ ]+commlog[ ]+(on|off)[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>cusp.commlogSet("%1")</send>
  </alias>
  
  <alias
   match="^[ ]*cusp[ ]+debug([ ]+[^ ]+)?[ ]*$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>cusp.debug(Trim("%1"))</send>
  </alias>
  
  <alias
   match="^[ ]*cusp(|[ ]+.*)$"
   enabled="y"
   regexp="y"
   send_to="12"
   sequence="1000"
  >
  <send>cusp.help()</send>
  </alias>


</aliases>

<!--  Variables  -->


<!--  Script  -->


<script>
<![CDATA[

----------------------------------------------------------------------------------------------------------
-- Dependencies
----------------------------------------------------------------------------------------------------------

require "gmcphelper"
require "wait"
require "check"
require "tprint"

dofile(GetInfo(60) .. "aardwolf_colors.lua")


----------------------------------------------------------------------------------------------------------
-- Global vars and tables
----------------------------------------------------------------------------------------------------------

cusp = {}

cusp.name = "CUSP"
cusp.ver  = "0.0.1"

cusp.thresholdDefault = 1000 -- By default, toggle noexp when within 1k exp of the next level


----------------------------------------------------------------------------------------------------------
-- MUSH callbacks and hooks
----------------------------------------------------------------------------------------------------------

function OnPluginInstall()
  cusp.init()
end -- OnPluginInstall


function OnPluginClose()
  cusp.fini()
end -- OnPluginClose


function OnPluginConnect()
  --cusp.print("OnPluginConnect!")
end -- OnPluginConnect


function OnPluginDisconnect()
  --cusp.print("OnPluginDisconnect!")
end -- OnPluginDisconnect


function OnPluginEnable()
  --cusp.print("OnPluginEnable!")
  cusp.print("@GENABLED@W")
end -- OnPluginEnable


function OnPluginDisable()
  --cusp.print("OnPluginDisable!")
  cusp.print("@RENABLED@W")
end -- OnPluginDisable


function OnPluginBroadcast(msg, id, name, text)
  if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
    if (text == "char.status") then
      cusp.checkExpToggle()
    end
  end
end


----------------------------------------------------------------------------------------------------------
-- Plugin init/de-init
----------------------------------------------------------------------------------------------------------

cuspTriggerCpAcceptName = "cuspTriggerCpAccept"
cuspTriggerOnLevelName  = "cuspTriggerOnLevel"

function cusp.init()
  -- Add a trigger to detect when we level
  AddTriggerEx(cuspTriggerOnLevelName,
               "^You raise a level! You are now level ([0-9]+).$",
               "cusp.onLevel()",
               trigger_flag.RegularExpression + trigger_flag.Replace,
	           custom_colour.Custom11, 0, "", "", sendto.script, 0)

  -- Add a trigger to detect when we accept a campaign
  AddTriggerEx(cuspTriggerCpAcceptName,
               "^.* tells you \\'I have selected (.*?) targets for you to hunt.*$",
               "cusp.cpAccept()",
               trigger_flag.RegularExpression + trigger_flag.Replace,
	           custom_colour.Custom11, 0, "", "", sendto.script, 0)

  -- We always keep these triggers enabled so that we can know if throttling is necessary
  -- when the user turns throttling on/off.  It may seem like extra overhead, but if we
  -- didn't track when throttling would be required at all times, we could be out of sync
  -- if the user turns throttling on.
  EnableTrigger(cuspTriggerCpAcceptName, true)
  EnableTrigger(cuspTriggerOnLevelName,  true)

  -- Display the helpfile when the plugin loads
  cusp.help()

end -- cusp.init


function cusp.fini()
  -- placeholder for now...
end -- cusp.fini


----------------------------------------------------------------------------------------------------------
-- Plugin modes
----------------------------------------------------------------------------------------------------------

function cusp.on()
  SetVariable("cuspEnabled", "on")
  cusp.print("EXP throttling is @GENABLED@w")
end -- cusp.on


function cusp.off()
  SetVariable("cuspEnabled", "off")
  cusp.print("EXP throttling is @RDISABLED@w")
end -- cusp.off


function cusp.isEnabled()
  local enableVal = GetVariable("cuspEnabled")
  if (enableVal == "on") then
    return true
  else
    return false
  end -- if
end -- cusp.isEnabled


function cusp.tnl(tnl)
  local newTNL = tonumber(tnl or "") or -1

  if (newTNL == -1) then
    newTNL = cusp.getThreshold() or -1
  else
    cusp.setThreshold(newTNL)
  end -- if

  cusp.print("TNL threshold is currently set to @C" .. newTNL .. "@W xp@w")
end -- cusp.tnl


function cusp.setThreshold(threshold)
  if (threshold == nil) or (threshold == "") then
    cusp.error("cusp.setThreshold: Missing TNL threshold value")
  else
    SetVariable("cuspThresholdTNL", tonumber(threshold or -1))
  end -- if
end -- cusp.setThreshold


function cusp.getThreshold()
  local threshold = GetVariable("cuspThresholdTNL")

  if (threshold == nil) or (threshold == "") then
    threshold = cusp.thresholdDefault
    cusp.print("Setting TNL threshold to default value \"" .. threshold .. "\"")
    cusp.setThreshold(cusp.thresholdDefault)
  end -- if

  return (tonumber(threshold or "") or -1)
end -- cusp.getThreshold


function cusp.setCpThisLevel(value)
  local enable
  if (value == true) then
    enable = "yes"
  else
    enable = "no"
  end -- if

  SetVariable("cuspCpThisLevel", enable)
end -- cusp.setCpThisLevel


function cusp.getCpThisLevel()
  local cpThisLevel = GetVariable("cuspCpThisLevel")

  if (cpThisLevel == "yes") then
    return true
  else
    return false
  end -- if
end -- cusp.getThreshold


function cusp.checkExpToggle()
  if (not cusp.isEnabled()) then
    return
  end -- if

  local charStatus = gmcp("char.status")
  if (charStatus == nil) then
    return
  end -- if

  local charTNL = (tonumber(charStatus.tnl or "") or -1)

  -- If we are within "threshold" xp of the next level and we haven't had a cp yet this level,
  -- throttle exp until we can pick up a campaign
  if (charTNL < cusp.getThreshold()) and (not cusp.getCpThisLevel()) then
    cusp.throttleExp(true)
  else
    cusp.throttleExp(false) 
  end -- if

end -- cusp.checkExpToggle


cusp.lastThrottleCmd  = "none"
cusp.lastThrottleTime = 0
cusp.filterSec        = 1 -- filter throttle toggles that happen sooner than N+1 seconds since the last toggle
function cusp.throttleExp(doThrottle)
  local currentTime = tonumber(os.time()) or 0
  
  local noexpCmd
  if (doThrottle) then
    noexpCmd = "on"
  else
    noexpCmd = "off"
  end -- if    

  -- If the throttle value is different from the previous throttle request or if it's been too long
  -- since the last update, sync the noexp state with the mud
  if (cusp.lastThrottleCmd ~= noexpCmd) or (currentTime - cusp.lastThrottleTime > cusp.filterSec) then
    --cusp.print("Syncing noexp state with aard: noexp is @W" .. noexpCmd)
    Execute("sendgmcp config noexp " .. noexpCmd)

    cusp.lastThrottleTime = currentTime
    cusp.lastThrottleCmd  = noexpCmd
  end -- if

end -- cusp.throttleExp


function cusp.cpAccept()
  cusp.throttleExp(false)
  cusp.setCpThisLevel(true)
end -- cusp.cpAccept


function cusp.onLevel()
  cusp.setCpThisLevel(false)
end -- cusp.onLevel


function cusp.version()
  cusp.print("Version " .. cusp.ver)
end -- cusp.version


function cusp.help()

cusp.printColors([[
@x039----------------------------------------------------------------------------@w
@YCUSP: @x191Campaign helper that takes you to the cusp of a new level via noexp@w
@x039----------------------------------------------------------------------------@w

    @wcusp@W [on|off]         @x173-- Enable or disable exp throttling
    @wcusp@W tnl [val]        @x173-- No exp when within [val] exp of next level

    @wcusp@W commlog [on|off] @x173-- Mirror messages to the commlog@w
    @wcusp@W version          @x173-- Report the current version of this plugin
    @wcusp@W help             @x173-- Display the usage you're reading right now...

@x039----------------------------------------------------------------------------@w
]])

end -- cusp.help


----------------------------------------------------------------------------------------------------------
-- Commlog access
----------------------------------------------------------------------------------------------------------

function cusp.commlogSet(enable)
  if (enable ~= "on") and (enable ~= "off") then
    cusp.error("cusp.commlogSet: invalid commlog mode \"" .. (enable or "nil") .. "\"")
    return
  end -- if

  SetVariable("commlogState", enable)

  local msg
  if (enable == "on") then
    msg = "@GENABLED@w"
  else
    msg = "@RDISABLED@w"
  end -- if

  cusp.print("Mirroring to communication log is " .. msg)

end -- cusp.commlog


function cusp.commlogGet()
  return (GetVariable("commlogState") or "")
end -- cusp.commlogGet


----------------------------------------------------------------------------------------------------------
-- Core helper functions
----------------------------------------------------------------------------------------------------------

function cusp.printFormat(msg)
  local formattedMsg = ""

  if (msg ~= nil) and (msg ~= "") then

    local outerColor = "@x39"
    local innerColor = "@x191"

    formattedMsg = outerColor .. "[" .. innerColor .. cusp.name .. outerColor .. "]@w " .. msg .. "@w"
  end -- if

  return formattedMsg
end -- cusp.printFormat


function cusp.printColors(msg)
  print(AnsiNote(stylesToANSI(ColoursToStyles(msg))))
end -- cusp.printColors


function cusp.print(msg)
  if (msg ~= nil) and (msg ~= "") then
    local formattedMsg = cusp.printFormat(msg)
    cusp.printColors(formattedMsg)

    -- If the user wants us to mirror messages to the commlog, do it :)
    local commlogState = cusp.commlogGet()
    if (commlogState == "on") then
      cusp.commLog(formattedMsg)
    end -- if
  end -- if

end -- cusp.print()


function cusp.error(msg)
  if (msg ~= nil) and (msg ~= "") then
    cusp.print("@RERROR@w " .. msg)
  end -- if
end -- cusp.error


function cusp.commLog(msg)
  local clPlugin   = "b555825a4a5700c35fa80780"
  local clFunction = "storeFromOutside"

  if (msg == nil) or (msg == "") then
    print("cusp.commLog: Missing message parameter")
    return error_code.eBadParameter
  end -- if

  local retval = CallPlugin(clPlugin, clFunction, msg)

  if (retval == error_code.eNoSuchPlugin) then
    print("cusp.commLog: target plugin does not exist")

  elseif (retval == error_code.ePluginDisabled) then
    print("cusp.commLog: target plugin is disabled")

  elseif (retval == error_code.eNoSuchRoutine) then
    print("cusp.commLog: target routine does not exist")

  elseif (retval == error_code.eErrorCallingPluginRoutine) then
    print("cusp.commLog: error calling plugin routine")

  elseif (retval ~= error_code.eOK) then
    print("cusp.commLog: Unknown return value from CallPlugin: " .. (retval or "nil"))

  end -- if

  return retval
end -- cusp.commLog


function cusp.debug(value)
  if (value == "1") then
    cusp.throttleExp(true)
  else
    cusp.throttleExp(false)
  end -- if
end -- cusp.debug


]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="cusp:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
