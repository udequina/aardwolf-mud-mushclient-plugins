<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, July 02, 2014, 11:43 p.m. -->
<!-- MuClient version 4.84 -->

<!-- Plugin "Sharptracker" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Nok3_DullTracker"
   author="Nokfah"
   id="4584d947bda63bd53fc522c2"
   language="Lua"
   purpose="Aardwolf Character Development Tracking (Rewrite of SharpTracker)"
   save_state="y"   
   requires="4.70"
   version="1.4"   
   >
<description trim="n">
		<![CDATA[
==================== Dull Tracker Help ====================
	Settings
	------------------
	To change a setting:
	dull <setting> <value>
	
	Here are the various settings and their default values:
	channel     - channel to report to - default: gtell - possible: any channel
	report      - report to channel - default: y - possible: y|n
	showinfo    - show session data in info bar - default: y - possible: y|n
	highlight   - turn highlighting on or off - default: y - possible: y|n
	valueColor  - color to use for values - default: @W - possible: ansi or xterm colors
	labelColor  - color to use for labels - default: @D - possible: ansi or xterm colors
	blabelColor - color to use for bright labels - default: @r - possible: ansi or xterm colors	
	
	Reports
	------------------
	Session reports: 	
	dull total <channel>(optional)
	dull session <channel>(optional)
	dull double <channel>(optional)
	
	Timed session:
	dull timer <minutes>(optional)  - Starts a timed session. Gains during session are reported upon completion.
	dull timer clear                - Cancels the running timed session.
		
	Historical Reports:
	dull <dbl|timed|cp|gq|lvl|pup|quest> -h <#>(optional)
	
	Stat reports. Send your stats your report channel (or channel specified):
	dull <instinct|mastery|stats> <channel>(optional)
	
	Area Reports:	
	dull xpr <area or number>(optional) - Exp rate for areas that have more than 5% of your total exp for the session
										  Inputting text as an optional parameter filters the list by area 
										  Inputting a number as an optional parameter shows the top # results
    
	dull xpr clear <area>(optional)		- Clears the exp rate data for all the areas
										  Optional parameter to only clear matching areas
										  
	dull gr <area or number>(optional)  - Gold rate for areas that have more than 5% of your total gold for the session 
										  Inputting text as an optional parameter filters the list by area 
										  Inputting a number as an optional parameter shows the top # results
										  
	dull gr clear <area>(optional)		- Clears the gold rate data for all the areas 
										  Optional parameter to only clear matching areas
	
	Setting Reports:
	dull settings
	dull gags 
	
	Gags
	------------------	
	Mode: 
	dull mode <normal|focused>
	
	Settings:	
	dull <normal|focused> <xp|gold|tax|loot|sac|> <y|n>	

	Data
	------------------
	dull clear total     - resets the overall totals to zero
	dull clear session   - resets the current session to zero
	dull xpr reset       - resets the xp rate counter	
	dull refresh         - refreshes the info bar values
  ]]>
</description>
</plugin>

<!-- 
	TODO:
		- Avg xp per kill
		- Session clear on logout
-->



<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>		
	<!-- Campaigns -->
	<trigger name="cp_capture_start" group="campaign" 
		match="CONGRATULATIONS! You have completed your campaign."
		enabled="y" keep_evaluating="y"
		send_to="12" sequence="100" 
	>
		<send>
			EnableTriggerGroup("cp_capture", true)						
		</send>
	</trigger>		
		
	<trigger name="cp_capture_end" group="campaign" 
		match="^You have completed [0-9]+ campaigns today\.$"	
		enabled="y"	regexp="y"  keep_evaluating="y" 
		send_to="12" sequence="200" 
	>
		<send>
			EnableTriggerGroup("cp_capture", false)			
		</send>
	</trigger>
	<!-- Global Quests -->	
	<trigger name="gq_mob_capture_start" group="global_quest" 
		match="^Congratulations, that was one of the GLOBAL QUEST mobs!$"
		enabled="y" regexp="y" keep_evaluating="y"
		send_to="12" sequence="100" 
	>
		<send>
			EnableTriggerGroup("gq_mob_capture", true)	
		</send>
	</trigger>	
	
	<trigger name="gq_mob_capture_end" group="global_quest"
		match="^(?<amount>[0-9]+) quest points awarded\.$"	
		enabled="n"	regexp="y"  keep_evaluating="y"		
		send_to="12" sequence="200"
	>
		<send>
			EnableTriggerGroup("gq_mob_capture", false)	
		</send>
	</trigger>
	
	<trigger name="gq_win_capture_start" group="global_quest" 
		match="^You were the first to complete this quest!$"
		enabled="y" regexp="y" keep_evaluating="y"
		send_to="12" sequence="100" 
	>
		<send>
			EnableTriggerGroup("gq_win_capture", true)
		</send>
	</trigger>		

	<trigger name="gq_win_capture_end" group="global_quest"
		match="^You may win [0-9]+ more gquests at this level\.$"
		enabled="y" regexp="y" keep_evaluating="y"
		send_to="12" sequence="100" 
	>
		<send>
			EnableTriggerGroup("gq_win_capture", false)
		</send>
	</trigger>	

	<!-- Double EXP -->	
	<trigger name="double_start"
		match="^For the next ([0-9]+) minutes experience is doubled in honor of the new superhero\.$|^Double experience for ([0-9]+) minutes courtesy of.+$|^\[    ([0-9]+) minutes of double exp started courtesy of donations being open   \]$|^For the next ([0-9]+) minutes all experience is doubled\!\!$"
		enabled="y" regexp="y" keep_evaluating="y"
		script="DoubleStart"
	>
	</trigger>	
		
	<trigger name="double_on_login"
		match="^INFO: Double experience is running in honor of .* reaching superhero. - ([0-9]+) minutes left\.|INFO: Double experience is running courtesy of Aardwolf supporters - see 'help donate'. - ([0-9]+) minutes left|INFO: Double experience is running courtesy of .* daily blessing. - ([0-9]+) minutes left\.$"
		enabled="y" regexp="y" keep_evaluating="y"
		script="DoubleStart"
	>
	</trigger>
	
	<trigger name="double_end"
		match="^INFO: Bonus experience has now expired\.$"
		enabled="y" regexp="y" keep_evaluating="y"
		script="DoubleEnd"
	>
	</trigger>
		
	<!-- Mastery -->		
	<trigger name="mastery_capture" group="mastery"
		match="^(Bash|Pierce|Slash|Acid|Air|Cold|Disease|Earth|Electric|Energy|Fire|Holy|Light|Magic|Mental|Negative|Poison|Shadow|Sonic|Water)\s+([0-9]+)\s*[0-9]+\s*[0-9,]+$"
		enabled="n" regexp="y" keep_evaluating="y"
		script="MasteryCapture"
	>
	</trigger>
	
	<!-- Instinct -->		
	<trigger name="instinct_capture" group="instinct"
		match="^((Level [0-9]+|N/A)?\s*: )?(?<skill>[a-zA-Z\s]+)\s*([0-9]+%|N/A)\s*(?<amount>[0-9]+)\s*([0-9,]+|N/A)\s*([0-9,]+|N/A)$"
		enabled="n" regexp="y" keep_evaluating="y"
		script="InstinctCapture"
	>
	</trigger>

	<!-- Resists -->
	<trigger name="resist_capture" group="resist"
		match="^(?<damtype>Bash|Pierce|Slash|Acid|Air|Cold|Disease|Earth|Electric|Energy|Fire|Holy|Light|Magic|Mental|Negative|Poison|Shadow|Sonic|Water)\s+(?:\-?[0-9]+)\s+(?:\-?[0-9]+)\s+(?:\-?[0-9]+)\s+(?<amount>\-?[0-9]+)$"
		enabled="n" regexp="y" keep_evaluating="y"
		script="ResistCapture"
	>
	</trigger>
	
	<!-- Bonus Stats -->		
	<trigger name="bonus_stat"
		match="^You gain a bonus (Strength|Intelligence|Wisdom|Dexterity|Constitution|Luck) point!$"
		enabled="y" regexp="y" keep_evaluating="y"
		script="BonusStat"
	>
	</trigger>
</triggers>

<aliases>		
	<alias
		name="help" match="^dull help$"
		regexp="y" enabled="y"
		script="Help"
	>
	</alias>
	
	<alias 
		name="invalid" match="^dull .*$"
		regexp="y" enabled="y"
		sequence="999" send_to="12"
		script="Help"
	>
		<send>ColourNote("red", "black", "DullTracker: Invalid Command")</send>
	</alias>

	<!-- Reporting -->
	<alias
		name="report_session" match="^dull session( [a-z ]+)?$"
		regexp="y" enabled="y"
		script="ReportSession"
	>
	</alias>
	
	<alias
		name="report_total" match="^dull total( [a-z ]+)?$"
		regexp="y" enabled="y"
		script="ReportTotal"
	>
	</alias>
	
	<alias
		name="report_history" match="^dull (cp|gq|quest|lvl|pup|dbl|timed) -h( [0-9]+)?$"
		regexp="y" enabled="y"
		script="ReportHistory"
	>
	</alias>
	
	<alias
		name="report_double" match="^dull double( [a-z ]+)?$"
		regexp="y" enabled="y"
		script="ReportDouble"
	>
	</alias>
	
	<alias
		name="report_stats" match="^dull stats( [a-z ]+)?$"
		regexp="y" enabled="y"
		script="ReportStats"
	>
	</alias>
	
	<alias
		name="report_mastery" match="^dull mastery( [a-z ]+)?$"
		regexp="y" enabled="y"
		script="ReportMastery"
	>
	</alias>
	
	<alias
		name="report_instinct" match="^dull instinct( [a-z ]+)?$"
		regexp="y" enabled="y"
		script="ReportInstinct"
	>
	</alias>

	<alias
		match="^dull resists( [a-z ]+)?$"
		regexp="y" enabled="y"
		script="ReportResists"
	>
	</alias>	
	
	<!-- XP Rate -->
	<alias 
		name="xpr_reset" match="^dull xpr reset$"
		script="XPReset"
		regexp="y" enabled="y"
	>
	</alias>
	
	<alias 
		name="xpr_clear" match="^dull xpr clear( .*)?$"
		script="XPRClear"
		sequence="100"
		regexp="y" enabled="y"
	>
	</alias>
	
	<alias 
		name="xpr_areas" match="^dull xpr( .*)?$"
		script="ShowAreaXPR"
		sequence="200"
		regexp="y" enabled="y"
	>
	</alias>
	
	<!-- Gold Rate -->
	<alias 
		name="gr_reset" match="^dull gr reset$"
		script="GRReset"
		regexp="y" enabled="y"
	>
	</alias>
	
	<alias 
		name="gr_clear" match="^dull gr clear( .*)?$"
		script="GRClear"
		sequence="100"
		regexp="y" enabled="y"
	>
	</alias>
	
	<alias 
		name="gr_areas" match="^dull gr( .*)?$"
		script="ShowAreaGR"
		sequence="200"
		regexp="y" enabled="y"
	>
	</alias>
	
	<!-- DPS -->
	<alias 
		name="dps_reset" match="^dull dps reset$"
		script="DPSReset"
		regexp="y" enabled="y"
	>
	</alias>
	
	<alias 
		name="dps_clear" match="^dull dps clear( .*)?$"
		script="DPSClear"
		sequence="100"
		regexp="y" enabled="y"
	>
	</alias>
	
	<alias 
		name="dps_areas" match="^dull dps( .*)?$"
		script="ShowAreaDPS"
		sequence="200"
		regexp="y" enabled="y"
	>
	</alias>
	
	<!-- Timer --> 
	<alias 
		name="timed_session_start" match="^dull timer( [0-9]+)?$"
		script="TimedSessionStart"
		regexp="y" enabled="y"
	>
	</alias>
	
	<alias 
		name="timed_session_clear" match="^dull timer clear$"
		script="TimedSessionClear"
		regexp="y" enabled="y"
	>
	</alias>
	
	<!-- Settings -->	
	<alias
		name="set_setting" match="^dull (channel|report|highlight|showinfo|valueColor|labelColor|blabelColor) (.*)$"
		regexp="y" enabled="y"
		script="SetSetting"
	>
	</alias>
		
	<alias
		name="report_setting" match="^dull settings$"
		regexp="y" enabled="y"
		script="ReportSettings"
	>
	</alias>
	
	<!-- Gags -->
	<alias
		name="report_gags" match="^dull gags$"
		regexp="y" enabled="y"
		script="ReportGags"
	>
	</alias>
		
	<alias
		name="set_mode" match="^dull (mode) (focused|normal)$"
		regexp="y" enabled="y"
		script="SetSetting"
	>
	</alias>
		
	<alias
		name="set_mode_setting" match="^dull (focused|normal) (xp|loot|gold|sac|tax) (y|n)$"
		regexp="y" enabled="y"
		script="SetModeSetting"
	>
	</alias>	
	
	<!-- troubleshooting stuffs -->
	<alias
		name="save_session" match="^dull save session$"
		regexp="y" enabled="y"
		script="SaveSession"
	>
	</alias>
	
	<alias
		name="clear_session" match="^dull clear session$"
		regexp="y" enabled="y"
		script="ClearSession"
	>
	</alias>
	
	<alias
		name="clear_total" match="^dull clear total$"
		regexp="y" enabled="y"
		script="ClearTotal"
	>
	</alias>
	
	<alias
		name="refresh_info" match="^dull refresh$"
		regexp="y" enabled="y"
		script="ReportSessionInfo"
	>
	</alias>	
	
	<alias
		name="show_variables" match="^dull show$"
		regexp="y" enabled="y"
		script="ShowVariables"
	>
	</alias>

	<alias
		match="^dull showtotal$"
		regexp="y" enabled="y"
		script="ShowTotalVariables"
	>
	</alias>
</aliases>
<script>
<![CDATA[
	require "serialize"
	
	local defaultSettings = {
		channel = "default",
		report = "y",
		showinfo = "y",		
		highlight = "y",
		mode = "normal",
		valueColor = "@W",		
		labelColor = "@D",
		blabelColor = "@r",
	}
	local settings = {}
	if (GetVariable("dt_settings") ~= nil) then
		luastmt = "obj = " .. GetVariable("dt_settings")
		assert (loadstring (luastmt or "")) ()		
		settings = obj
		
		-- just in case settings changed between versions
		for defaultSetting, defaultVal in pairs(defaultSettings) do
			if (settings[defaultSetting] == nil) then settings[defaultSetting] = defaultVal end
		end
	else
		settings = defaultSettings 
	end	
	
	-- report variables	
	local reportTo = settings["channel"]
	local groupMembers = { }
	local reportDamageReceived = {}
	local reportDamageDealt = {}
	local stats = {}
	local statOrder = { "str", "int", "wis", "dex", "con", "luck", "hr", "dr", "hp", "mana", "moves" }
	local abbreviations = { 
		str = "STR", int = "INT", wis = "WIS", dex = "DEX", con = "CON", luck = "LUK", 
		hp ="HP", mana = "MN", moves = "MV", hr = "HR", dr = "DR", Saves = "SV"
	}
	local mastery = {}	
	local instinct = {}
	local resists = {}
	
	-- double variables
	local doubleRunning = false	
	local doubleData = {}
	
	-- timed session variables
	local timedSessionRunning = false	
	local timedData = {}
	
	-- gq timer helpers
	local gqStarted = false
	local gqCompleted = false
	
	-- Couldn't figure out how to get the colors I wanted from AddTrigger() so using importXML() instead
	local highlightXML = "<triggers><trigger name=\"%s\" group=\"highlight\" match=\"%s\" other_text_colour=\"%s\" other_back_colour=\"%s\" enabled=\"y\" regexp=\"y\" keep_evaluating=\"y\" custom_colour=\"17\"></trigger></triggers>"	
	
	local infoFGColor = "black"
	local infoBGColor = "white"	
	
    -- rates
	local rates = {
		xpr = {
			last = os.time(),
			total = 0,
			seconds = 0,
			rate = 0
		},
		xprDbl = {		
			last = os.time(),
			total = 0,
			seconds = 0,
			rate = 0
		},
		xprTimed = {
			last = os.time(),
			total = 0,
			seconds = 0,
			rate = 0
		},
		gr = {
			last = os.time(),
			total = 0,
			seconds = 0,
			rate = 0
		},
		dps = {
			last = os.clock(),
			total = 0,
			seconds = 0,
			rate = 0
		}
	}
		
	local currentArea = "none"
	local areaXPR = {}
	local areaGR = {}
	local areaDPS = {}
	
	
	-- Session Data
	local lastIncrease = {} -- For reporting increases in fields
	local sessionData = {}
	if (GetVariable("dt_sessionData") ~= nil) then
		luastmt = "obj = " .. GetVariable("dt_sessionData")
		assert (loadstring (luastmt or "")) ()		
		sessionData = obj
	end
	
	-- Total Data
	local totalData = {}	
	if (GetVariable("dt_totalData") ~= nil) then
		luastmt = "obj = " .. GetVariable("dt_totalData")
		assert (loadstring (luastmt or "")) ()		
		totalData = obj
	end
	local totalStart = os.time()
	if (GetVariable("dt_totalDataStart") ~= nil) then
		totalStart = tonumber(GetVariable("dt_totalDataStart"))
	else 
		SetVariable("dt_totalDataStart", tostring(totalStart))
	end
	
	-----------------
	-- Timers
	-----------------
	local timers
	timers = {
		cp = { 
			last = 0, 
			start = GetVariable("dt_timer_cp") or os.time(), 	
			history = {},
			disp = function() 
				local timer = "CP"
				local count = ReportField(sessionData["count"]["cp"])
				local timeTaken = SecondsToMinutes(timers["cp"].last)
				local qp = GetLastIncrease("qp_cp_reward")												
				local gold = GetLastIncrease("gold_cp")				
				
				local tr = GetLastIncrease("tr_cp")
				local trString = ""
				if (tonumber(tr) > 0) then trString =  " " .. dispVal(tr) .. dispLbl("tr") end
				
				local pr = GetLastIncrease("pr_cp")
				local prString = ""
				if (tonumber(pr) > 0) then prString =  " " .. dispVal(pr) .. dispLbl("pr") end
				
				local tp = GetLastIncrease("tp_cp")
				local tpString = ""
				if (tonumber(tp) > 0) then tpString =  " " .. dispVal(tp) .. dispLbl("tp") end
				
				local daily = GetLastIncrease("qp_cp_daily")				
				local dailyString = ""				
				if (tonumber(daily) > 0) then dailyString = dispBLbl(" + ") .. dispVal(daily) .. dispLbl("daily") end				
				
				local reportString = dispLbl("[")..dispBLbl(timer)..dispLbl(" #")..dispVal(count)..dispLbl("|")..
					dispVal(qp)..dispLbl("qp")..
					dailyString..trString..prString..tpString..
					" "..dispVal(gold)..dispLbl("g")..
					dispLbl("] ")..timeTaken
					
				table.insert(timers["cp"].history, reportString)
				return reportString				
			end },
		lvl = { 
			last = 0, 
			start = GetVariable("dt_timer_lvl") or os.time(), 	
			history = {},			
			disp = function() 	
				local timer = "LVL"
				local count = ReportField(sessionData["count"]["lvl"])
				local timeTaken = SecondsToMinutes(timers["lvl"].last)
				local tr = GetLastIncrease("tr_lvl")				
				
				local lucky = GetLastIncrease("tr_luck")								
				local luckyString = ""
				if (tonumber(lucky) > 0) then luckyString = " ".. dispVal(lucky) .. dispLbl("lucky") end
				
				local db = GetLastIncrease("tr_db")								
				local dbString = ""
				if (tonumber(db) > 0) then dbString = " ".. dispVal(db) .. dispLbl("db") end
				
				local bonusString = (lastIncrease["BonusStat"] or "")
				lastIncrease["BonusStat"] = ""
				if (bonusString ~= "") then bonusString = dispBLbl(" Bonus: ")..dispVal(bonusString) end
				
				
				local reportString = dispLbl("[")..dispBLbl(timer)..dispLbl(" #")..dispVal(count)..dispLbl("|")..
					dispVal(tr)..dispLbl("tr")..luckyString..dbString..
					dispLbl("] ")..timeTaken..bonusString
					
				table.insert(timers["lvl"].history, reportString)
				return reportString
			end },
		pup = { 
			last = 0, 
			start = GetVariable("dt_timer_pup") or os.time(),
			history = {},
			disp = function() 					
				local timer = "PUP"
				local count = ReportField(sessionData["count"]["pup"])
				local timeTaken = SecondsToMinutes(timers["pup"].last)
				local tr = GetLastIncrease("tr_pup")				
				
				local lucky = GetLastIncrease("tr_luck")								
				local luckyString = ""
				if (tonumber(lucky) > 0) then luckyString = " ".. dispVal(lucky) .. dispLbl("lucky") end
				
				local db = GetLastIncrease("tr_db")								
				local dbString = ""
				if (tonumber(db) > 0) then dbString = " ".. dispVal(db) .. dispLbl("db") end
				
				local bonusString = (lastIncrease["BonusStat"] or "")
				lastIncrease["BonusStat"] = ""
				if (bonusString ~= "") then bonusString = dispBLbl(" Bonus: ")..dispVal(bonusString) end
				
				local reportString = dispLbl("[")..dispBLbl(timer)..dispLbl(" #")..dispVal(count)..dispLbl("|")..
					dispVal(tr)..dispLbl("tr")..luckyString..dbString..
					dispLbl("] ")..timeTaken..bonusString
					
				table.insert(timers["pup"].history, reportString)
				return reportString
			end },
		quest = { 
			last = 0,
			start = GetVariable("dt_timer_quest") or os.time(),  
			history = {},
			disp = function() 
				local timer = "QUEST"
				local count = ReportField(sessionData["count"]["q"])
				local timeTaken = SecondsToMinutes(timers["quest"].last)
				local reward = GetLastIncrease("qp_q_reward")
				local tier = GetLastIncrease("qp_q_tier")
				local opk = GetLastIncrease("qp_q_opk")
				local hc = GetLastIncrease("qp_q_hc")
				local mccp = GetLastIncrease("qp_q_mccp")											
				local regular = reward + tier + mccp + opk + hc
								
				local lucky = GetLastIncrease("qp_q_lucky")
				local luckyString = ""
				if (tonumber(lucky) > 0) then luckyString = dispBLbl(" + ") .. dispVal(lucky) .. dispLbl("lucky") end
				
				local db = GetLastIncrease("qp_q_db")
				local dbString = ""
				if (tonumber(db) > 0) then dbString = dispBLbl(" + ") .. dispVal(db) .. dispLbl("db") end
				
				local total = regular + lucky + db
				local totalString = ""
				if (total > regular) then totalString = dispBLbl(" = ") .. dispVal(total) .. dispLbl("total") end	
								
				local pr = GetLastIncrease("pr_q")
				local prString = ""
				if (tonumber(pr) > 0) then prString = dispBLbl(" ") .. dispVal(pr) .. dispLbl("pr") end
				
				local tr = GetLastIncrease("tr_q")
				local trString = ""
				if (tonumber(tr) > 0) then trString = dispBLbl(" ") .. dispVal(tr) .. dispLbl("tr") end
				
				local tp = GetLastIncrease("tp_q")
				local tpString = ""
				if (tonumber(tp) > 0) then tpString = dispBLbl(" ") .. dispVal(tp) .. dispLbl("tp") end
								
				local reportString = dispLbl("[")..dispBLbl(timer)..dispLbl(" #")..dispVal(count)..dispLbl("|")..
					dispVal(regular)..dispLbl("qp")..luckyString..dbString..totalString..prString..trString..tpString..
					dispLbl("] ")..dispVal(timeTaken)	
				
				table.insert(timers["quest"].history, reportString)
				return reportString					
			end },
		gq = { 
			last = 0, 
			start = GetVariable("dt_timer_gq") or os.time(), 	
			history = {},
			disp = function() 
				local timer = "GQ"
				local count = ReportField(sessionData["count"]["gq"])
				local timeTaken = SecondsToMinutes(timers["gq"].last)
				local winQP = GetLastIncrease("qp_gq_win")
				local mobQP = GetLastIncrease("qp_gq_mob")
				local qp = winQP + mobQP
				local gold = GetLastIncrease("gold_gq")
				
				local tr = GetLastIncrease("tr_gq")
				local trString = ""
				if (tonumber(tr) > 0) then trString =  " " .. dispVal(tr) .. dispLbl("tr") end
				
				local pr = GetLastIncrease("pr_gq")
				local prString = ""
				if (tonumber(pr) > 0) then prString =  " " .. dispVal(pr) .. dispLbl("pr") end
				
				local tp = GetLastIncrease("tp_gq")
				local tpString = ""
				if (tonumber(tp) > 0) then tpString =  " " .. dispVal(tp) .. dispLbl("tp") end
				
				local reportString =  dispLbl("[")..dispBLbl(timer)..dispLbl(" #")..dispVal(count)..dispLbl("|")..
					dispVal(qp)..dispLbl("qp")..
					trString..prString..tpString..
					" "..dispVal(gold)..dispLbl("g")..
					dispLbl("] ")..timeTaken
					
				table.insert(timers["gq"].history, reportString)
				return reportString
			end },
		dbl = {
			last = 0,
			start = GetVariable("dt_timer_dbl") or os.time(),
			history = {},
			disp = function() 								
				local infoString = ""		
				
				local timer = "DBL"
				local count = ReportField(sessionData["count"]["dbl"])
				local timeTaken = SecondsToMinutes(timers["dbl"].last)								
				local minutes = tonumber(timers["dbl"].last) / 60.0
				local gold = SumField(doubleData["gold"])
				local xp = SumField(doubleData["xp"])
				local tr = SumField(doubleData["tr"])
				local lvl = 0
				local pup = 0
				if (doubleData["count"] ~= nil) then
					lvl = tonumber(ReportField(doubleData["count"]["lvl"])) or 0
					pup = tonumber(ReportField(doubleData["count"]["pup"])) or 0
				end
							
				infoString = infoString .. 
					dispBLbl("XPR ") .. dispVal(string.format("%.1f", rates.xprDbl.rate)) .. 
					dispLbl("|") ..						
					dispBLbl("GOLD ")..dispVal(comma_value(gold)) .. dispLbl("g ") .. dispVal(comma_value(math.floor(gold/minutes))) .. dispLbl("/m") .. dispLbl("|") ..						
					dispBLbl("XP ")..dispVal(comma_value(xp)) .. dispLbl("xp ") .. dispVal(comma_value(math.floor(xp/minutes))) .. dispLbl("/m") .. dispLbl("|")
				
				if (pup > 0) then
					infoString = infoString .. dispBLbl("# ").. dispVal(comma_value(pup)) .. dispLbl("pup ")
				else
					infoString = infoString .. dispBLbl("# ").. dispVal(comma_value(lvl)) .. dispLbl("lvl ")
				end
				
				infoString = infoString .. dispVal(comma_value(tr)) .. dispLbl("tr")				
						
				local reportString = dispLbl("[")..dispBLbl(timer)..dispLbl(" #")..dispVal(count)..dispLbl("|")..
					infoString..dispLbl("] ")..timeTaken
									
				table.insert(timers["dbl"].history, reportString)
				doubleData = {}
				return reportString			
			end
		},
		timed = {
			last = 0,
			start = GetVariable("dt_timer_dbl") or os.time(),
			history = {},
			disp = function() 								
				local infoString = ""		
				
				local timer = "TIMED"				
				local timeTaken = SecondsToMinutes(timers["timed"].last)								
				local minutes = tonumber(timers["timed"].last) / 60.0
				local gold = SumField(timedData["gold"])
				local xp = SumField(timedData["xp"])
				local tr = SumField(timedData["tr"])
				local lvl = 0
				local pup = 0
				if (timedData["count"] ~= nil) then
					lvl = tonumber(ReportField(timedData["count"]["lvl"])) or 0
					pup = tonumber(ReportField(timedData["count"]["pup"])) or 0
				end
							
				infoString = infoString .. 
					dispBLbl("XPR ") .. dispVal(string.format("%.1f", rates.xprTimed.rate)) .. 
					dispLbl("|") ..						
					dispBLbl("GOLD ")..dispVal(comma_value(gold)) .. dispLbl("g ") .. dispVal(comma_value(math.floor(gold/minutes))) .. dispLbl("/m") .. dispLbl("|") ..						
					dispBLbl("XP ")..dispVal(comma_value(xp)) .. dispLbl("xp ") .. dispVal(comma_value(math.floor(xp/minutes))) .. dispLbl("/m") .. dispLbl("|")
				
				if (pup > 0) then
					infoString = infoString .. dispBLbl("# ").. dispVal(comma_value(pup)) .. dispLbl("pup ")
				else
					infoString = infoString .. dispBLbl("# ").. dispVal(comma_value(lvl)) .. dispLbl("lvl ")
				end
				
				infoString = infoString .. dispVal(comma_value(tr)) .. dispLbl("tr")				
						
				local reportString = dispLbl("[")..dispBLbl(timer)..dispLbl("|")..
					infoString..dispLbl("] ")..timeTaken
									
				table.insert(timers["timed"].history, reportString)
				timedData = {}
				return reportString			
			end
		},
	}		
	local timerQueue = {}
	function dispVal(val) return settings["valueColor"] .. (val or "") end
	function dispLbl(label) return settings["labelColor"] .. (label or "") end
	function dispBLbl(blabel) return settings["blabelColor"] .. (blabel or "") end
	
	-----------------
	-- Gags
	-----------------	
	local gagTriggers = {}
	
	local defaultGags = {
		normal = { xp = "n", gold = "n", tax = "n",  loot = "n", sac = "n" },
		focused = { xp = "y", gold = "y", tax = "y", loot = "y", sac = "y" }
	}	
	local gags = {}
	if (GetVariable("dt_gags") ~= nil) then
		luastmt = "obj = " .. GetVariable("dt_gags")
		assert (loadstring (luastmt or "")) ()		
		gags = obj		
		
		-- just in case settings changed between versions
		for defaultGag, defaultVal in pairs(defaultGags["normal"]) do			
			if (gags["normal"][defaultGag] == nil) then gags["normal"][defaultGag] = defaultVal end
		end
		for defaultGag, defaultVal in pairs(defaultGags["focused"]) do			
			if (gags["focused"][defaultGag] == nil) then gags["focused"][defaultGag] = defaultVal end
		end
	else
		gags = defaultGags
	end	
	
	-----------------
	-- Triggers
	-----------------
	local triggerAttr = {}
	
	-- separate since they have multiple purposes
	local expTriggers = {
		{ func = "IncrementField", attributes = { field = "xp_mob", gag = "xp" }, match = "^You receive (?<amount>[0-9]+)(\\+[0-9]+)?(\\+[0-9]+)?(\\+[0-9]+)? experience points?\\.$" },
		{ func = "IncrementField", attributes = { field = "xp_mob", gag = "xp" }, match = "^You receive [0-9]+\\+(?<amount>[0-9]+)(\\+[0-9]+)?(\\+[0-9]+)? experience points?\\.$" },		
		{ func = "IncrementField", attributes = { field = "xp_mob", gag = "xp" }, match = "^You receive [0-9]+(\\+[0-9]+)\\+(?<amount>[0-9]+)(\\+[0-9]+)? experience points?\\.$" },		
		{ func = "IncrementField", attributes = { field = "xp_mob", gag = "xp" }, match = "^You receive [0-9]+(\\+[0-9]+)(\\+[0-9]+)\\+(?<amount>[0-9]+) experience points?\\.$" },		
	    { func = "IncrementField", attributes = { field = "xp_bonus", gag = "xp" }, match = "^You receive (?<amount>[0-9]+) bonus experience points? (in honor of|courtesy of|to rejoice)" },
		{ func = "IncrementField", attributes = { field = "xp_rare", gag = "rare" }, match = "^You receive (?<amount>[0-9]+) 'rare kill' experience bonus\\.$" },	
	}
	
	local goldTriggers = {
		-- gold
		{ func = "IncrementField", attributes = { field = "gold_mob", gag = "gold" }, match = "^You get (?<amount>[0-9,]+) gold coins? from .* of .*\\.$" },	
		{ func = "IncrementField", attributes = { field = "gold_crumble", gag = "gold" }, match = "^.* crumbles into (?<amount>[0-9,]+) gold pieces\\.$" },	
		{ func = "IncrementField", attributes = { field = "gold_shared", gag = "gold" }, match = "^.* shares [0-9,]+ gold( coins?)? with .*\\. Your share is (?<amount>[0-9,]+) gold( coins?)?\\.$" },
	}		                                                                                    
	
	local damageTriggers = {
		{ func = "IncrementField", attributes = { field = "damage", gag = "gold" }, match = "^You get (?<amount>[0-9,]+) gold coins? from .* of .*\\.$" },	
	}
	
	local triggers = {
		--------------------------------------
		-- IncrementField triggers
		--------------------------------------
		-- qp
		{ func = "IncrementField", attributes = { field = "qp_q_reward" }, match = "^.*tells you \'As a reward, I am giving you (?<amount>[0-9]+) quest points? and [0-9]+ gold\\.\'$" },
		{ func = "IncrementField", attributes = { field = "qp_q_tier" }, match = "^.*tells you \'I am also giving you a (?<amount>[0-9]+) quest points? tier bonus.*" },		
		{ func = "IncrementField", attributes = { field = "qp_q_opk" }, match = "^.* tells you '.* (?<amount>[0-9]+) quest points? OPK bonus\\.\'$" },			
		{ func = "IncrementField", attributes = { field = "qp_q_hc" }, match = "^.* tells you '.* (?<amount>[0-9]+) quest points? Hardcore bonus\\.\'$" },			
		{ func = "IncrementField", attributes = { field = "qp_q_lucky" }, match = "^You get lucky and gain an extra (?<amount>[0-9]+) quest points?\\.$" },
		{ func = "IncrementField", attributes = { field = "qp_q_mccp" }, match = "^You gain an extra (?<amount>[0-9]+) quest points? \'MCCP Bonus\'\\.$" },
		{ func = "IncrementField", attributes = { field = "qp_q_db" }, match = "^You receive (?<amount>[0-9]+) bonus quest points from your daily blessing\\.$" },		
		{ func = "IncrementField", attributes = { field = "qp_cp_reward" }, group="cp_capture", enabled="n", match = "^\\s*Reward of (?<amount>[0-9]+) quest points added\\.$" },
		{ func = "IncrementField", attributes = { field = "qp_cp_daily" }, group="cp_capture", enabled="n", match = "^You receive (?<amount>[0-9]+) quest points? bonus for your first campaign completed today\\.$" },		
		{ func = "IncrementField", attributes = { field = "qp_gq_mob" }, group="gq_mob_capture", enabled="n", match = "^(?<amount>[0-9]+) quest points? awarded\\.$" },
		{ func = "IncrementField", attributes = { field = "qp_gq_win" }, group="gq_win_capture", enabled="n", match = "^Reward of (?<amount>[0-9]+) quest points added\\.$" },
		{ func = "IncrementField", attributes = { field = "qp_db" }, match = "^.* blesses you with (?<amount>[0-9]+) bonus quest points\\.$" },			
		
		-- tp		
		{ func = "IncrementField", attributes = { field = "tp_cp" }, group="cp_capture", enabled="n", match = "^\\s*Reward of (?<amount>[0-9]+) trivia points? added\\.$" },		
		{ func = "IncrementField", attributes = { field = "tp_gq" }, group="gq_win_capture", enabled="n", match = "^Reward of (?<amount>[0-9]+) trivia points? added\\.$" },		
		
		-- gold
		{ func = "IncrementField", attributes = { field = "gold_sac", gag = "sac" }, match = "^.*gives you (?<amount>[0-9,]+) gold coins? for .*\\.$" },
		{ func = "IncrementField", attributes = { field = "gold_sell" }, match = "^You sell .* for (?<amount>[0-9,]+) gold\\.$" },
		{ func = "IncrementField", attributes = { field = "gold_fence" }, match = "^You fenced .* items? for (?<amount>[0-9,]+)\\.$" },
		{ func = "IncrementField", attributes = { field = "gold_haggle" }, match = "^You haggle with .* for an extra (?<amount>[0-9,]+) gold\\.$" },
		{ func = "IncrementField", attributes = { field = "gold_cp" }, group="cp_capture", enabled="n", match = "^\\s*Reward of (?<amount>[0-9,]+) gold coins? added\\.$" },		
		{ func = "IncrementField", attributes = { field = "gold_gq" }, group="gq_win_capture", enabled="n", match = "^Reward of (?<amount>[0-9,]+) gold coins? added\\.$" },				
		{ func = "IncrementField", attributes = { field = "gold_db_gold" }, match = "^.* blesses you with (?<amount>[0-9,]+) additional gold\\.$" },
		{ func = "IncrementField", attributes = { field = "gold_db_kill", gag = "gold" }, match = "^Your daily blessing added (?<amount>[0-9,]+) gold to the corpse\\.$" },	
		{ func = "IncrementField", attributes = { field = "gold_q" }, match = "^.*tells you \'As a reward, I am giving you [0-9]+ quest points? and (?<amount>[0-9]+) gold\\.\'$" }, 
		{ func = "IncrementField", attributes = { field = "gold_titan" }, match = "^a man in a suit gives you (?<amount>[0-9,]+) gold\\.$" },
		   		
		
		-- expx		
		{ func = "IncrementField", attributes = { field = "xp_daily", gag = "xp" }, match = "^You receive (?<amount>[0-9]+) bonus experience points? from your daily blessing\\.$" },
		
		-- practices
		{ func = "IncrementField", attributes = { field = "pr_lvl" }, match = "^You gain [0-9]+ hit points, [0-9]+ mana, [0-9]+ moves, (?<amount>[0-9]+) practices? and [0-9]+ trains?\\.$" },
		{ func = "IncrementField", attributes = { field = "pr_q" }, match = "^\\*\\* You gain a bonus (?<amount>[0-9]+) practices? \\*\\*\\s*$" },
		{ func = "IncrementField", attributes = { field = "pr_cp" }, group = "cp_capture", enabled = "n", match= "^\\s*Reward of (?<amount>[0-9]+) practice sessions? added\\.$" },
		{ func = "IncrementField", attributes = { field = "pr_gq" }, group = "gq_win_capture", enabled = "n", match= "^Reward of (?<amount>[0-9]+) practice sessions? added\\.$" },				
		
		-- trains
		{ func = "IncrementField", attributes = { field = "tr_lvl" }, match = "^You gain [0-9]+ hit points, [0-9]+ mana, [0-9]+ moves, [0-9]+ practices?(?:,| and) (?<amount>[0-9]+) trains?(?: and [0-9]+ instinct trains?)?\\.$" },
		{ func = "IncrementField", attributes = { field = "tr_instinct_level" }, match = "^You gain [0-9]+ hit points, [0-9]+ mana, [0-9]+ moves, [0-9]+ practices?, [0-9]+ trains? and (?<amount>[0-9]+) instinct trains?\\.$" },		
		{ func = "IncrementField", attributes = { field = "tr_instinct_deposit" }, match = "^You deposit (?<amount>[0-9]+) trains? for later use on instinct\\.$" },	
		{ func = "IncrementField", attributes = { field = "tr_pup" }, match = "^You gain (?<amount>[0-9]+) trains?\\.$" },
		{ func = "IncrementField", attributes = { field = "tr_db" }, match = "^You gain (?<amount>[0-9]+) extra trains? daily blessing bonus\\.$" },
		{ func = "IncrementField", attributes = { field = "tr_q" }, match = "^\\*\\* You gain a bonus (?<amount>[0-9]+) trains? \\*\\*\\s*$" },
		{ func = "IncrementField", attributes = { field = "tr_luck" }, match= "^Lucky! You gain an extra (?<amount>[0-9]+) training sessions?!$" },						
		{ func = "IncrementField", attributes = { field = "tr_cp" }, group = "cp_capture", enabled = "n", match= "^\\s*Reward of (?<amount>[0-9]+) training sessions? added\\.$" },	
		{ func = "IncrementField", attributes = { field = "tr_gq" }, group = "gq_win_capture", enabled = "n", match= "^Reward of (?<amount>[0-9]+) training sessions? added\\.$" },				
		{ func = "IncrementField", attributes = { field = "tr_titan" }, match = "^A man in a suit gives you (?<amount>[0-9]+) trains\\.$" },		 
		
		
		--------------------------------------
		-- Special for gold
		--------------------------------------			
		{ func = "SharedGold", attributes = { field = "gold_shared", gag = "gold" }, match = "^You share (?<total>[0-9,]+) gold( coins?)? with .*\\. Your share is (?<share>[0-9,]+) gold( coins?)?\\.$" },
		
		--------------------------------------
		-- DecrementField triggers
		--------------------------------------
		{ func = "DecrementField", attributes = { field = "gold_mob" }, match = "^Your daily blessing added (?<amount>[0-9,]+) gold to the corpse\\.$" },		
		{ func = "DecrementField", attributes = { field = "gold_tax", gag = "tax" }, match = "^You are taxed (?<amount>[0-9,]+) gold( coins?)? by your clan\\.$" },	
		{ func = "DecrementField", attributes = { field = "gold_sell" }, match = "^You haggle with .* for an extra (?<amount>[0-9,]+) gold\\.$" },

			
		--------------------------------------
		-- IncrementCount triggers
		--------------------------------------
		{ func = "IncrementCount", attributes = { field = "count_q" }, match = "^.*tells you \'Congratulations, .*, on completing your quest!\'$" },
		{ func = "IncrementCount", attributes = { field = "count_cp" }, match = "^CONGRATULATIONS! You have completed your campaign\\.$" },
		{ func = "IncrementCount", attributes = { field = "count_gq" }, match = "^You have now joined Global Quest # [0-9]+\\. See \'help gquest\' for available commands\\.$" },
		{ func = "IncrementCount", attributes = { field = "count_lvl" }, match = "^You raise a level! You are now level [0-9]+\\.$" },
		{ func = "IncrementCount", attributes = { field = "count_pup" }, sequence = 250, match = "^Congratulations, hero\\. You have increased your powers!$" },		
		{ func = "IncrementCount", attributes = { field = "count_kill" }, match = "^You receive [0-9]+(\\+[0-9]+)?(\\+[0-9]+)? experience points?\\.$" },
		{ func = "IncrementCount", attributes = { field = "tp_mob" }, match = "^You killed a Trivia Point bonus mob!! Trivia point added\\.$" },
		{ func = "IncrementCount", attributes = { field = "tp_db" }, match = "^[\\w\\s]+ blesses you with a trivia point!$" }, 
		{ func = "IncrementCount", attributes = { field = "count_dbl" }, match = "^INFO: Bonus experience has now expired\\.$" },	
		{ func = "IncrementCount", attributes = { field = "tr_q" }, match= "^\\*\\* You gain a bonus training session \\*\\*\\s*$" },						
		{ func = "IncrementCount", attributes = { field = "pr_q" }, match= "^\\*\\* You gain a bonus practice \\*\\*\\s*$" },
		{ func = "IncrementCount", attributes = { field = "tp_q" }, match = "^\\*\\* You gain a bonus trivia point! \\*\\*\\s*$" },	
		
		
		--------------------------------------
		-- StartTimer triggers
		--------------------------------------
		{ func = "StartTimer", attributes = { field = "cp" },  sequence = 200, match = "^Commander Barcett tells you \'Good luck in your campaign!\'$" },
		{ func = "StartTimer", attributes = { field = "cp" },  sequence = 200, match = "^.* tells you \'Good luck in your campaign!\'$" },
		{ func = "StartTimer", attributes = { field = "lvl" }, sequence = 300, match = "^You raise a level! You are now level [0-9]+\\.$" },
		{ func = "StartTimer", attributes = { field = "pup" }, sequence = 300, match = "^Congratulations, hero\\. You have increased your powers!$" },		
		{ func = "StartTimer", attributes = { field = "quest" },  sequence = 200, match = "^.*tells you \'You have [0-9]+ minutes to complete your quest\\.\'$" },
		{ func = "StartTimer", attributes = { field = "gq" },  sequence = 200, match = "^You have now joined the quest. See \'help gquest\' for available commands\\.$" },		
		{ func = "StartTimer", attributes = { field = "gq" },  sequence = 250, match = "^Global Quest: Global quest # [0-9]+ for levels (.*) to (.*) has now started\\.$" },		
		{ func = "StartTimer", attributes = { field = "dbl" },  sequence = 200, match = "^For the next ([0-9]+) minutes experience is doubled in honor of the new superhero\\.|Double experience for ([0-9]+) minutes courtesy of.+|\\[    ([0-9]+) minutes of double exp started courtesy of donations being open   \\]|For the next ([0-9]+) minutes all experience is doubled\\!\\!$" },				
		
		
		--------------------------------------
		-- EndTimer triggers
		--------------------------------------
		{ func = "EndTimer", attributes = { field = "cp" },  sequence = 200, group="cp_capture", match = "^CONGRATULATIONS! You have completed your campaign\\.$" },
		{ func = "EndTimer", attributes = { field = "lvl" },  sequence = 200, match = "^You raise a level! You are now level [0-9]+\\.$" },
		{ func = "EndTimer", attributes = { field = "pup" }, sequence = 200, match = "^Congratulations, hero\\. You have increased your powers!$" },
		{ func = "EndTimer", attributes = { field = "quest" },  sequence = 200, match = "^.*tells you \'Congratulations, .*, on completing your quest!\'$" },
		{ func = "EndTimer", attributes = { field = "gq" },  sequence = 200, match = "^(You were the first to complete this quest!|You have finished this global quest\\.)$" },
		{ func = "EndTimer", attributes = { field = "dbl" }, sequence = 200, match = "^INFO: Bonus experience has now expired\\.$" },
		
		
		--------------------------------------
		-- InfoBackgroundTrigger triggers
		--------------------------------------
		-- quest
		{ func = "InfoBackgroundTrigger", attributes = { bgcolor = "red", fgcolor = "white" }, match = "^QUEST: You may now quest again\\.$" },
		{ func = "InfoBackgroundTrigger", attributes = { bgcolor = "orange" }, match = "^QUEST: You have almost completed your QUEST!$" },
		{ func = "InfoBackgroundTrigger", match = "^.*tells you \'Congratulations, .*, on completing your quest!\'$" },
		{ func = "InfoBackgroundTrigger", match = "^QUEST: You have run out of time for your quest\\.$" },
		{ func = "InfoBackgroundTrigger", match = "^.*You hang your head in shame and admit defeat before.*$" },
		
		-- global quest
		{ func = "InfoBackgroundTrigger", attributes = { bgcolor = "green", fgcolor = "white" },  match = "^Global Quest: Global quest # \\d+ has been declared for levels \\d+ to \\d+\\.$" },
		{ func = "InfoBackgroundTrigger", match = "^You have now joined Global Quest # [0-9]+\\. See \'help gquest\' for available commands\\.$" },
											      
		
		
		--------------------------------------
		-- strictly gag triggers
		--------------------------------------
		{ func = "Gag",  attributes = { gag = "loot" }, match = "^You get (?![0-9,]+ gold coins?)(.+) from the (.+) of (.+)\\.$" },	                                                              	
		{ func = "Gag",  attributes = { gag = "sac" }, match = "^You bury your fangs deep into .+, drinking thirstily.$" },		                                                         
		{ func = "Gag",  attributes = { gag = "sac" }, match = "^Ahhhh, that feels better!$" },
		{ func = "Gag",  attributes = { gag = "sac" }, match = ".* sacrifices .* to .*\\.$" },
		{ func = "Gag",  attributes = { gag = "sac" }, match = "^.* drinks thirstily from .*\\.$" },
		{ func = "Gag",  attributes = { gag = "sac" }, match = "^.* is not impressed with .*\\.$" },
		{ func = "Gag",  attributes = { gag = "xp" }, match = "^.* receives [0-9]+(\\+[0-9]+)? experience points?\\.$" },		
	}						
	
	--------------------------------------
	-- highlighting
	--------------------------------------
	local highlightTriggers = {		
		-- events
		{ textColor="black", backColor="red", match = "^QUEST: You may now quest again\\.$" },
		{ textColor="white", backColor="red", match = "^\\*\\* You can take revenge on (\\w+) for 15 minutes\\.$" },		
		{ textColor="white", backColor="dimgray", match = "^.* has fled!$" },	
		{ textColor="white", backColor="dimgray", match = "^.* is here!$" },		
		{ textColor="white", backColor="red", match = "^No one in this area by the name \'.*\'\\.$" },
		{ textColor="white", backColor="dimgray", match = "^Magic walls bounce you back\\.$" },
		{ textColor="white", backColor="dimgray", match = "^You cannot recall from this room\\.$" },	
		{ textColor="white", backColor="red", match = "^There is no .* around here\\.$" },	
		{ textColor="white", backColor="purple", match = "^\\*\\* You gain a bonus trivia point! \\*\\*$" },				
			
		-- mob kills
		{ textColor="black", backColor="red", match = "^QUEST: You have almost completed your QUEST!$" },
		{ textColor="black", backColor="green", match = "^Congratulations, that was one of the GLOBAL QUEST mobs!$" },
		{ textColor="white", backColor="green", match = "^Congratulations, that was one of your CAMPAIGN mobs!$" },	
		{ textColor="white", backColor="purple", match = "^You killed a Trivia Point bonus mob!! Trivia point added\\.$" },		
		{ textColor="white", backColor="purple", match = "^You spot an AardWords \\(TM\\) tile in the corpse!$" },		
		{ textColor="white", backColor="purple", match = "^You find an \\(Aarchaeology\\) piece hidden in the corpse!$" },	
		{ textColor="white", backColor="purple", match = "^You find a \\|P\\[Poker Card\\]P\\| special item hidden in the corpse!$" },	

		
		-- weapon special activation		
		--{ textColor="dodgerblue", backColor="black", match = "^.* drains life from .*\\.$" }, -- vampiric
		{ textColor="dodgerblue", backColor="black", match = "^.* eyes are seared by .*$" }, -- flaming
		{ textColor="dodgerblue", backColor="black", match = "^.* is poisoned by the venom on .*$" }, -- poison
		{ textColor="dodgerblue", backColor="black", match = "^.* muscles stop responding\\.$" }, -- shock
		{ textColor="dodgerblue", backColor="black", match = "^.* turns blue and shivers\\.$" }, -- frost
		{ textColor="white", backColor="dodgerblue", match = "^Your .* glows brightly and almost decapitates .*\\.$" },	-- vorpal
		{ textColor="white", backColor="dodgerblue", match = "^Your death blow CLEAVES .* in two!$" }, -- death blow
		
		-- maledictions/debuffs
		{ textColor="white", backColor="tomato", match = "^You feel as if you are being watched\\.$" },		
		{ textColor="white", backColor="tomato", match = "^You are blinded\\.$" },		
		{ textColor="white", backColor="tomato", match = "^([\\w\\s]+) DISARMS you and you struggle not to drop your weapon!$" },		
		{ textColor="white", backColor="tomato", match = "^You are trapped in an invisible web!$" },
		{ textColor="white", backColor="tomato", match = "^You feel unwell\\.$" }, -- disease
		{ textColor="white", backColor="tomato", match = "^You feel very sick\\.$" }, -- poison
		{ textColor="white", backColor="tomato", match = "^You feel unclean\\.$" }, -- curse

		  

		{ textColor="white", backColor="darkslategray", match = ".* is unaffected by your .*" }, -- immune
		
	}				
	
	function Help()
		ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))
	end
	
	function NewVersionCleanup()
		-- If instinct trains is just a number and not a table, it's old...
		if totalData["tr"] ~= nil and tonumber(totalData["tr"]["instinct"]) ~= nil then
			local oldInstinct = totalData["tr"]["instinct"]
			totalData["tr"]["instinct"] = { old = oldInstinct }
		end

		-- Same for session
		if sessionData["tr"] ~= nil and tonumber(sessionData["tr"]["instinct"]) ~= nil then
			local oldInstinct = sessionData["tr"]["instinct"]
			sessionData["tr"]["instinct"] = { old = oldInstinct }
		end
	end

	function OnPluginInstall()					
		ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))

		NewVersionCleanup()
		
		local totalInc = 0
		for i, info in ipairs(triggers) do
			totalInc = totalInc + 1
			AddLogTrigger(totalInc, info)
		end											
		
		for i, info in ipairs(expTriggers) do
			totalInc = totalInc + 1
			AddLogTrigger(totalInc, info)
			
			-- xprate stuffs
			local triggerFlags = trigger_flag.Enabled + trigger_flag.KeepEvaluating + trigger_flag.RegularExpression								
			AddTriggerEx("xpr_" .. tostring(i), info.match, "", triggerFlags,
				custom_colour.NoChange, 0, "", "XPIncrease", sendto.script, 50)
		end				

		for i, info in ipairs(goldTriggers) do
			totalInc = totalInc + 1
			AddLogTrigger(totalInc, info)
			
			-- gold rate stuffs
			local triggerFlags = trigger_flag.Enabled + trigger_flag.KeepEvaluating + trigger_flag.RegularExpression								
			AddTriggerEx("goldrate_" .. tostring(i), info.match, "", triggerFlags,
				custom_colour.NoChange, 0, "", "GoldIncrease", sendto.script, 200)
		end		

		-- dps
		local triggerFlags = trigger_flag.Enabled + trigger_flag.KeepEvaluating + trigger_flag.RegularExpression								
			AddTriggerEx("damage", "^(?:\\[[0-9]+\\] )?Your .*(?:\\.|!) \\[(?<amount>[0-9]+)\\]$", "", triggerFlags,
				custom_colour.NoChange, 0, "", "DamageIncrease", sendto.script, 200)
		
		-- highlighting
		for i, info in ipairs(highlightTriggers) do
			local triggerName = "highlight_" .. tostring(i)			
			local triggerXML = string.format(highlightXML, triggerName, info.match, info.textColor, info.backColor)
			ImportXML(triggerXML)					
		end			
		SetHighlight(settings.highlight)
		
		SetGags(settings.mode)				
		
		if (settings.showinfo == "y") then
			ShowInfoBar(true)
			InfoBackground("white")
			ReportSessionInfo()		
		end
	end
	
	function OnPluginBroadcast (msg, id, name, text)
		if (id == '3e7dedbe37e44942dd46d264') then
			if (text == "room.info") then
				res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info") --- We just want the gmcp.char section.
				luastmt = "gmcpdata = " .. gmcparg --- Convert the serialized string back into a lua table.

				assert (loadstring (luastmt or "")) ()
						
				-- Update the current area and room		
				currentArea = gmcpdata.zone							
			end
		end
	end

	function GetGmcp(str)
		local res, val = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", str)
		return val
	end
	
	function AddLogTrigger(id, info)
		local triggerName = info.func .. "_" .. tostring(id)			
		-- trigger flags
		local triggerFlags = trigger_flag.Enabled + trigger_flag.KeepEvaluating + trigger_flag.RegularExpression			
		
		-- Create the trigger
		AddTriggerEx(triggerName, info.match, "", triggerFlags,
			custom_colour.NoChange, 0, "", info.func, sendto.script, (info.sequence or 100))
			
		-- Additional trigger options
		SetTriggerOption(triggerName, "group", info.group or "")
		SetTriggerOption(triggerName, "enabled", info.enabled or "y")
		
		-- user defined attributes for the fun stuff
		triggerAttr[triggerName] = {}
		if (info.attributes ~= nil) then								
			for attribute, val in pairs(info.attributes) do
				if (attribute == "gag") then
					if (gagTriggers[val] == nil) then gagTriggers[val] = {} end
					table.insert(gagTriggers[val], triggerName)
				else
					triggerAttr[triggerName][attribute] = val
				end
			end			
		end
	end	
	
	function InfoBackgroundTrigger(name, line, wildcards)
		infoFGColor = (triggerAttr[name]["fgcolor"] or "black")
		infoBGColor = (triggerAttr[name]["bgcolor"]	or "white")
		ReportSessionInfo()
	end	
	
	----------------------------
	-- Session Vars
	----------------------------	
	function SaveSession()		
		SetVariable("dt_sessionData", serialize.save_simple(sessionData))
		ColourNote("orange", "black", "Session saved")
	end
	
	function ClearSession()
		sessionData = {}
		ColourNote("orange", "black", "Session cleared")
	end
	
	function ShowVariables()
		ColourNote("orange", "black", "data: " .. serialize.save_simple(sessionData))
	end	

	function ShowTotalVariables()
		ColourNote("orange", "black", "data: " .. serialize.save_simple(totalData))
	end
	
	function SaveTotal()
		SetVariable("dt_totalData", serialize.save_simple(totalData))
	end
	
	function ClearTotal()
		totalData = {}
		totalStart = os.time()
		SetVariable("dt_totalDataStart", tostring(os.time()))
		SetVariable("dt_totalData", serialize.save_simple(totalData))
		ColourNote("orange", "black", "Totals cleared")
	end
	
	--------------------------
	--  Tracking
	--------------------------
	function SharedGold(name, line, wildcards)
		local subGold = -1 * string.gsub(wildcards.total, ",", "")			
		IncrementField(name, line, {["amount"] = subGold})
		GoldIncrease(name, line, {["amount"] = subGold})
		
		local addGold = string.gsub(wildcards.share, ",", "")
		IncrementField(name, line, {["amount"] = addGold})
		GoldIncrease(name, line, {["amount"] = addGold})
	end
	
	function IncrementCount(name, line, wildcards)
		if (GetTriggerOption(name, "omit_from_output") == 1) then 
			--ColourNote("orange", "black", "gagged: " .. line)
		end
			
		newWildcards = {["amount"] = 1}
		IncrementField(name, line, newWildcards)
	end
	
	function DecrementField(name, line, wildcards)
		if (GetTriggerOption(name, "omit_from_output") == 1) then 
			--ColourNote("orange", "black", "gagged: " .. line)
		end
	
		wildcards.amount = -1 * string.gsub(wildcards.amount, ",", "")
		IncrementField(name, line, wildcards)
	end
	
	function IncrementField(name, line, wildcards)		
		if (GetTriggerOption(name, "omit_from_output") == 1) then 
			--ColourNote("orange", "black", "gagged: " .. line)
		end
					
		local cleanedAmount = string.gsub(wildcards.amount, ",", "")
		
		-- total values
		AddToField(totalData, split(triggerAttr[name]["field"]), cleanedAmount)		
		SaveTotal()
		
		-- session values
		AddToField(sessionData, split(triggerAttr[name]["field"]), cleanedAmount)		
		if (doubleRunning) then AddToField(doubleData, split(triggerAttr[name]["field"]), cleanedAmount) end
		if (timedSessionRunning) then AddToField(timedData, split(triggerAttr[name]["field"]), cleanedAmount) end
		
		SetLastIncrease(triggerAttr[name]["field"], cleanedAmount)
		
		ReportSessionInfo()		
	end	
	
	function AddToField(data, fields, amount)			
		if (fields ~= nil) then
			local field = table.remove(fields, 1)						
			
			if (table.getn(fields) > 0) then															
				if (data[field] == nil) then data[field] = {} end
								
				AddToField(data[field], fields, amount)
			else				
				data[field] = (data[field] or 0) + amount
			end
		end
	end
	
	function SetLastIncrease(field, amount)
		lastIncrease[field] = (lastIncrease[field] or 0) + amount
	end
	
	function GetLastIncrease(field)
		local last = (lastIncrease[field] or 0)
		lastIncrease[field] = 0
		return last
	end
	
	function BonusStat(name, line, wildcards)
		lastIncrease["BonusStat"] = (lastIncrease["BonusStat"] or "") .. wildcards[1] .. " "
	end	
	
	------------------------
	-- Reporting
	------------------------
	function TimedSessionStart(name, line, wildcards)
		if (not timedSessionRunning) then
			timedSessionRunning = true
			timers["timed"].start = os.time()
			local duration = 5
			if (wildcards[1] ~= nil and wildcards[1] ~= "") then duration = tonumber(wildcards[1]) end
			timers["timed"].finish = timers["timed"].start + duration * 60			
			
			rates.xprTimed.last = os.time()
			rates.xprTimed.total = 0
			rates.xprTimed.seconds = 0
			rates.xprTimed.rate = 0
			
			AddTimer("timed_session_timer", 0, duration, 0, "", timer_flag.Enabled + timer_flag.OneShot, "TimedSessionEnd")
			ColourNote("Orange", "", "Timed session started. Duration: " .. duration .. " minutes")
		else
			ColourNote("Orange", "", "A timed session is already running. Remaining: " .. timers["timed"].finish - os.time() .. " seconds")
		end
	end
	
	function TimedSessionClear()
		timedSessionRunning = false
		timedData = {}
		DeleteTimer("timed_session_timer")
		ColourNote("Orange", "", "Timed session cleared")
	end
	
	function TimedSessionEnd(name, line, wildcards)		
		
		timers["timed"].last = os.time() - timers["timed"].start
		
		-- queue the timer report
		timerQueue["timed"] = true
		if (IsTimer("report_timers") ~= error_code.eOK) then					
			AddTimer("report_timers", 0, 0, 1, "", timer_flag.Enabled + timer_flag.OneShot, "ReportTimers")
		end	
				
		timedSessionRunning = false
	end
	
	function DoubleStart(name, line, wildcards)
		doubleRunning = true				
		local dblMins = 0
		for i = 1, 4, 1 do
			if (wildcards[i] ~= nil and wildcards[i] ~= "") then								
				dblMins = wildcards[i]				
			end
		end		
		if (settings.report == "y") then
			Report(dispBLbl("EXP: ") .. dispVal("DOUBLE EXP") .. dispLbl(" for ") .. dispVal(dblMins) .. dispLbl("m"))
		end
		
		rates.xprDbl.last = os.time()
		rates.xprDbl.total = 0
		rates.xprDbl.seconds = 0
		rates.xprDbl.rate = 0
	end
	
	function DoubleEnd()		
		doubleRunning = false				
	end
	
	function StartTimer(name, line, wildcards)	
		if (triggerAttr[name]["field"] == "gq") then
			gqStarted = true
			gqCompleted = false
		end

		timers[triggerAttr[name]["field"]].start = os.time()		
	end
	
	function EndTimer(name, line, wildcards)			
		local timer = triggerAttr[name]["field"]
		
		if (timer == "gq" and gqCompleted) then
			-- gq is already done, reduntant trigger, gtfo
			gqStarted = false
			gqCompleted = false
			return
		else 			
			gqStarted = false
			gqComplted = true
		end

		if timerQueue[triggerAttr[name]["field"]] then
			ReportTimer(triggerAttr[name]["field"])

			if (IsTimer("report_timers") == error_code.eOK) then
				ResetTimer("report_timers")
			end
		end
		
		timers[timer].last = os.time() - timers[timer].start		
		
		-- Add the timer to the queue and queue the report after a second
		-- to make sure all the related data is captured by the triggers		
		-- double exp is the exception						
		timerQueue[triggerAttr[name]["field"]] = true
		if (IsTimer("report_timers") ~= error_code.eOK) then					
			AddTimer("report_timers", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot, "ReportTimers")
		end				
	end
	
	function ReportTimers()			
		-- This isn't really a queue anymore :P
		-- lazy fixes for life	
		for timer, report in pairs(timerQueue) do
			if report then
				ReportTimer(timer)
			end
		end		
	end

	function ReportTimer(timer)
		local report = timers[timer].disp()
		
		if settings.report == "y" then					
			Report(report)			
		end

		timerQueue[timer] = false
	end
	
	-------------------------
	-- XP Rate
	-------------------------
	function XPIncrease(name, line, wildcards)	
		local now = os.time()

		if (areaXPR[currentArea] == nil) then 
			areaXPR[currentArea] = {
				rate = 0, total = 0, seconds = 0,
				dblRate = 0, dblTotal = 0, dblSeconds = 0,
				rare = 0
			} 
		end
		
		local timeSinceLast = now - rates.xpr.last
		local timeSinceLastDbl = now - rates.xprDbl.last
		
		if (string.find(line, "rare kill") ~= nil) then						
			if (not doubleRunning) then		
				if (timeSinceLast < 60) then
					areaXPR[currentArea].total = areaXPR[currentArea].total - tonumber(wildcards.amount)
					areaXPR[currentArea].rare = areaXPR[currentArea].rare + tonumber(wildcards.amount)
				end
			else
				if (timeSinceLastDbl < 60) then
					areaXPR[currentArea].dblTotal = areaXPR[currentArea].dblTotal - 2*tonumber(wildcards.amount)
					areaXPR[currentArea].rare = areaXPR[currentArea].rare + 2*tonumber(wildcards.amount)
				end
			end
		end
		
		if (not doubleRunning) then			
			-- only update if time since last kill is under a minute
			if (timeSinceLast < 60) then
				rates.xpr.total = rates.xpr.total + tonumber(wildcards.amount)
				rates.xpr.seconds = (rates.xpr.seconds or 0) + timeSinceLast					
				rates.xpr.rate = 1000 / (rates.xpr.total / rates.xpr.seconds)	
				
				areaXPR[currentArea].total = (areaXPR[currentArea].total or 0) + tonumber(wildcards.amount)
				areaXPR[currentArea].seconds = (areaXPR[currentArea].seconds or 0) + timeSinceLast
				areaXPR[currentArea].rate = 1000 / (areaXPR[currentArea].total / areaXPR[currentArea].seconds)
			end
			
			rates.xpr.last = now
		else			
			-- only update if time since last kill is under a minute
			if (timeSinceLastDbl < 60) then
				rates.xprDbl.total = rates.xprDbl.total + tonumber(wildcards.amount)
				rates.xprDbl.seconds = rates.xprDbl.seconds + timeSinceLastDbl					
				rates.xprDbl.rate = 1000 / (rates.xprDbl.total / rates.xprDbl.seconds)

				areaXPR[currentArea].dblTotal = (areaXPR[currentArea].dblTotal or 0) + tonumber(wildcards.amount)
				areaXPR[currentArea].dblSeconds = (areaXPR[currentArea].dblSeconds or 0) + timeSinceLastDbl
				areaXPR[currentArea].dblRate = 1000 / (areaXPR[currentArea].dblTotal / areaXPR[currentArea].dblSeconds)
			end
			
			rates.xprDbl.last = now
		end	

		if (timedSessionRunning) then
			local timeSinceLastTimed = now - rates.xprTimed.last
			
			-- only count if last was < 60 and it is not bonus exp
			if (timeSinceLastTimed < 60 and string.find(line, "bonus") == nil) then				
						
				rates.xprTimed.total = rates.xprTimed.total + tonumber(wildcards.amount)
				rates.xprTimed.seconds = rates.xprTimed.seconds + timeSinceLastTimed					
				rates.xprTimed.rate = 1000 / (rates.xprTimed.total / rates.xprTimed.seconds)			
			end
			
			rates.xprTimed.last = now
		end		
	end	
	
	function ShowAreaXPR(name, line, wildcards)	
		-- set the filters
		local filterArea = false
		local filterCount = false
		local areaFilter = ""
		local count = 0
		
		if (wildcards[1] ~= nil and wildcards[1] ~= "") then
			if (tonumber(wildcards[1]) ~= nil and tonumber(wildcards[1]) ~= 0) then
				filterCount = true
				count = tonumber(wildcards[1])
			else
				filterArea = true
				areaFilter = wildcards[1]:gsub("^%s*(.-)%s*$", "%1")
			end
		end
		
		-- get the totals
		local totalEXP = 0
		local longestName = 0
		local longestRare = 0
		for area, info in pairs(areaXPR) do
			if (string.len(area) > longestName) then longestName = string.len(area) end
			
			local rareLength = string.len(string.format("%.1f", comma_value(info.rare/1000)))
			if (rareLength > longestRare) then longestRare = rareLength end
			
			totalEXP = totalEXP + info.total + info.dblTotal
		end
	
		for area, info in spairs(areaXPR, function(t,a,b) return (t[a].rate or 0) < (t[b].rate or 0) end) do
			local displayArea = true
			
			local percentExp = (info.total + info.dblTotal) / totalEXP * 100
			if (percentExp < 5) then displayArea = false end			
			if (filterCount) then displayArea = count > 0 end		
			if (filterArea) then displayArea = string.find(area, areaFilter) ~= nil end																 									
			
			if (displayArea) then							
				local timePadding = 8 + 2*string.len(settings.labelColor) + 2*string.len(settings.valueColor)
						
				Report(dispLbl("[") .. 
					dispBLbl(PadLeft(area, longestName))  .. dispLbl("|") .. 
					dispVal(PadLeft(string.format("%.1f", info.rate), 5)) .. dispLbl("xpr ") .. 
					dispVal(PadLeft(string.format("%.1f", comma_value(info.total/1000)) .. "K", 7)) .. dispLbl("exp " ) ..
					PadLeft(SecondsToMinutes(info.seconds),timePadding) ..
									
					dispLbl("|") ..
									
					dispVal(PadLeft(string.format("%.1f", info.dblRate), 5)) .. dispLbl("xpr ") .. 
					dispVal(PadLeft(string.format("%.1f", comma_value(info.dblTotal/1000)) .. "K", 7)) .. dispLbl("exp " ) ..
					PadLeft(SecondsToMinutes(info.dblSeconds),timePadding) ..
					
					dispLbl("|") ..
					
					dispVal(PadLeft(string.format("%.1f", comma_value(info.rare/1000)) .. "K", longestRare+1)) .. dispLbl("rare" ) ..
					
					dispLbl("|") ..
					
					dispVal(PadLeft(string.format("%.1f",  percentExp), 5) .. "%") ..
					dispLbl("]"))				
			end
			
			count = count - 1
		end		
	end
	
	function PadLeft(str, num)
		return string.sub(string.rep(" ", num) .. str, -1*num)
	end
	
	function XPReset()
		rates.xpr.last = os.time()
		rates.xpr.total = 0
		rates.xpr.seconds = 0
		rates.xpr.rate = 0
		
		rates.xprDbl.last = os.time()
		rates.xprDbl.total = 0
		rates.xprDbl.seconds = 0
		rates.xprDbl.rate = 0
		
		ReportSessionInfo()
	end
	
	function XPRClear(name, line, wildcards)
		local areaFilter = wildcards[1]:gsub("^%s*(.-)%s*$", "%1")
	
		if (areaFilter ~= nil and areaFilter ~= "") then
			for area, xpr in pairs(areaXPR) do
				if (string.find(area, areaFilter) ~= nil) then
					areaXPR[area] = nil
					
					ColourNote("orange", "", "Area EXP Rate data cleared for: " .. area)
				end
			end
		else			
			areaXPR = {}
			
			ColourNote("orange", "", "All area EXP Rate data cleared")
		end
	end
	
	-------------------------
	-- Gold Rate
	-------------------------
	function GoldIncrease(name, line, wildcards)	
		local now = os.time()

		if (areaGR[currentArea] == nil) then 
			areaGR[currentArea] = {
				rate = 0, total = 0, seconds = 0				
			} 
		end
		
		local cleanedAmount = string.gsub(wildcards.amount, ",", "")
			
		local timeSinceLast = now - rates.gr.last
		-- only update if time since last kill is under a minute
		if (timeSinceLast < 60) then
			rates.gr.total = rates.gr.total + tonumber(cleanedAmount)
			rates.gr.seconds = rates.gr.seconds + timeSinceLast					
			rates.gr.rate = rates.gr.total / (rates.gr.seconds/60)

			areaGR[currentArea].total = (areaGR[currentArea].total or 0) + tonumber(cleanedAmount)
			areaGR[currentArea].seconds = (areaGR[currentArea].seconds or 0) + timeSinceLast
			areaGR[currentArea].rate = areaGR[currentArea].total / (areaGR[currentArea].seconds/60)
		end
		
		rates.gr.last = now				
	end	
	
	function ShowAreaGR(name, line, wildcards)	
		-- set the filters
		local filterArea = false
		local filterCount = false
		local areaFilter = ""
		local count = 0
		
		if (wildcards[1] ~= nil and wildcards[1] ~= "") then
			if (tonumber(wildcards[1]) ~= nil and tonumber(wildcards[1]) ~= 0) then
				filterCount = true
				count = tonumber(wildcards[1])
			else
				filterArea = true
				areaFilter = wildcards[1]:gsub("^%s*(.-)%s*$", "%1")
			end
		end
		
		-- get the totals
		local totalGold = 0
		longestName = 0
		for area, info in pairs(areaGR) do
			if (string.len(area) > longestName) then longestName = string.len(area) end
			totalGold = totalGold + info.total
		end
	
		for area, info in spairs(areaGR, function(t,a,b) return (t[a].rate or 0) > (t[b].rate or 0) end) do
			local displayArea = true
			
			local percentGold = info.total / totalGold * 100
			if (percentGold < 5) then displayArea = false end			
			if (filterCount) then displayArea = count > 0 end
			if (filterArea) then displayArea = string.find(area, areaFilter) ~= nil end																 				
			
			if (displayArea) then							
				local timePadding = 8 + 2*string.len(settings.labelColor) + 2*string.len(settings.valueColor)
							
				Report(dispLbl("[") .. 
					dispBLbl(PadLeft(area, longestName))  .. dispLbl("|") .. 
					dispVal(PadLeft(string.format("%.1f", info.rate/1000), 5) .. "K") .. dispLbl("gpm ") .. 
					dispVal(PadLeft(string.format("%.1f", info.total/1000000), 5) .. "M") .. dispLbl("g " ) ..
					PadLeft(SecondsToMinutes(info.seconds),timePadding) ..
									
					dispLbl("|") ..															
					
					dispVal(PadLeft(string.format("%.1f",  percentGold), 5) .. "%") ..
					dispLbl("]"))				
			end
			
			count = count - 1
		end		
	end	
	
	function GRReset()
		rates.gr.last = os.time()
		rates.gr.total = 0
		rates.gr.seconds = 0
		rates.gr.rate = 0
		
		ReportSessionInfo()
	end	
	
	function GRClear(name, line, wildcards)
		local areaFilter = wildcards[1]:gsub("^%s*(.-)%s*$", "%1")
	
		if (areaFilter ~= nil and areaFilter ~= "") then
			for area, xpr in pairs(areaGR) do
				if (string.find(area, areaFilter) ~= nil) then
					areaGR[area] = nil
					
					ColourNote("orange", "", "Area Gold Rate data cleared for: " .. area)
				end
			end
		else			
			areaGR = {}
			
			ColourNote("orange", "", "All area Gold Rate data cleared")
		end
	end
	
	-------------------------
	-- DPS
	-------------------------
	function DamageIncrease(name, line, wildcards)	
		local now = os.clock()

		if (areaDPS[currentArea] == nil) then 
			areaDPS[currentArea] = {
				rate = 0, total = 0, seconds = 0				
			} 
		end
		
		local cleanedAmount = string.gsub(wildcards.amount, ",", "")		
			
		local timeSinceLast = now - rates.dps.last
		-- only update if time since last kill is under a minute
		if (timeSinceLast < 60) then
			rates.dps.total = rates.dps.total + tonumber(cleanedAmount)
			rates.dps.seconds = rates.dps.seconds + timeSinceLast					
			rates.dps.rate = rates.dps.total / rates.dps.seconds

			areaDPS[currentArea].total = (areaDPS[currentArea].total or 0) + tonumber(cleanedAmount)
			areaDPS[currentArea].seconds = (areaDPS[currentArea].seconds or 0) + timeSinceLast
			areaDPS[currentArea].rate = areaDPS[currentArea].total / areaDPS[currentArea].seconds
		end		
		
		rates.dps.last = now				
	end	
	
	function ShowAreaDPS(name, line, wildcards)	
		-- set the filters
		local filterArea = false
		local filterCount = false
		local areaFilter = ""
		local count = 0
		
		if (wildcards[1] ~= nil and wildcards[1] ~= "") then
			if (tonumber(wildcards[1]) ~= nil and tonumber(wildcards[1]) ~= 0) then
				filterCount = true
				count = tonumber(wildcards[1])
			else
				filterArea = true
				areaFilter = wildcards[1]:gsub("^%s*(.-)%s*$", "%1")
			end
		end
		
		-- get the totals
		local totalDamage = 0
		longestName = 0
		for area, info in pairs(areaDPS) do
			if (string.len(area) > longestName) then longestName = string.len(area) end
			totalDamage = totalDamage + info.total
		end
	
		for area, info in spairs(areaDPS, function(t,a,b) return (t[a].rate or 0) > (t[b].rate or 0) end) do
			local displayArea = true
			
			local percentDamage = info.total / totalDamage * 100
			if (percentDamage < 5) then displayArea = false end			
			if (filterCount) then displayArea = count > 0 end
			if (filterArea) then displayArea = string.find(area, areaFilter) ~= nil end																 				
			
			if (displayArea) then							
				local timePadding = 8 + 2*string.len(settings.labelColor) + 2*string.len(settings.valueColor)
							
				Report(dispLbl("[") .. 
					dispBLbl(PadLeft(area, longestName))  .. dispLbl("|") .. 
					dispVal(PadLeft(string.format("%.1f", info.rate), 8)) .. dispLbl("dps ") .. 
					dispVal(PadLeft(string.format("%.1f", info.total/1000000), 5) .. "M") .. dispLbl("dmg " ) ..
					PadLeft(SecondsToMinutes(info.seconds),timePadding) ..
									
					dispLbl("|") ..															
					
					dispVal(PadLeft(string.format("%.1f",  percentDamage), 5) .. "%") ..
					dispLbl("]"))				
			end
			
			count = count - 1
		end		
	end	
	
	function DPSReset()
		rates.dps.last = os.clock()
		rates.dps.total = 0
		rates.dps.seconds = 0
		rates.dps.rate = 0
		
		ReportSessionInfo()
	end	
	
	function DPSClear(name, line, wildcards)
		local areaFilter = wildcards[1]:gsub("^%s*(.-)%s*$", "%1")
	
		if (areaFilter ~= nil and areaFilter ~= "") then
			for area, xpr in pairs(areaDPS) do
				if (string.find(area, areaFilter) ~= nil) then
					areaDPS[area] = nil
					
					ColourNote("orange", "", "DPS data cleared for: " .. area)
				end
			end
		else			
			areaDPS = {}
			
			ColourNote("orange", "", "All area Gold Rate data cleared")
		end
	end
	
	-------------------------
	-- Settings/Mode/Gags
	-------------------------		
	function SetSetting(name, line, wildcards)
		ColourNote("orange", "black", wildcards[1] .. " set to: " .. wildcards[2])
		settings[wildcards[1]] = wildcards[2]
		
		-- special case from mode
		if (wildcards[1] == "mode") then SetGags(settings.mode) end
		if (wildcards[1] == "highlight") then SetHighlight(settings.highlight) end
		if (wildcards[1] == "showinfo") then ShowInfoBar(wildcards[2] == "y") end
		
		SetVariable("dt_settings", serialize.save_simple(settings))
	end	
	
	function SetModeSetting(name, line, wildcards)	
		gags[wildcards[1]][wildcards[2]] = wildcards[3]
		
		ColourNote("orange", "black", "gag for: " .. wildcards[1] .. " - " .. wildcards[2] .. " set to: " .. wildcards[3])
		
		SetVariable("dt_gags", serialize.save_simple(gags))
		SetGags(settings.mode)
	end
	
	function SetHighlight(setting)
		EnableTriggerGroup("highlight", setting == 'y')
	end
	
	function Gag(name, line, wildcards)
		--ColourNote("orange", "black", "gagged: " .. line)
	end
	
	function SetGags(mode)
		for gagType, val in pairs(gags[mode]) do
			for i, trigger in ipairs(gagTriggers[gagType]) do					
				SetTriggerOption(trigger, "omit_from_output", val)
			end
		end
	end		
	
	function ReportSettings()
		for setting, val in pairs(settings) do
			ColourNote("orange", "black", setting .. ": " .. val)
		end
	end
	
	function ReportGags()
		for mode, gagSettings in pairs(gags) do
			ColourTell("orange", "black", mode .. " - ")
			for gagType, val in pairs(gagSettings) do
				ColourTell("orange", "black", gagType .. ":" .. val .. "  ")			
			end
			ColourNote("orange", "black", "")
		end
	end
	
	-------------------------
	-- Internal Utilities
	-------------------------
	function SecondsToMinutes(seconds)
		local secondsStr = tostring(seconds % 60)
		local minutesStr = tostring(math.floor(seconds / 60))
		return dispVal(minutesStr) .. dispLbl("m ") .. dispVal(secondsStr) .. dispLbl("s")
	end
	
	function SecondsToDays(seconds)
		local days = tostring(seconds / 86400)
		return dispVal(string.format("%.1f", days)) .. dispLbl("days")
	end
	
	function ReportSessionInfo()		
		if (settings["showinfo"] ~= "n") then
			local infoString = ""			
					
			if (doubleRunning) then
				infoString = infoString .. "[ DOUBLE  XPR | " .. string.format("%.1f", rates.xprDbl.rate)
			else
				infoString = infoString .. "[ XPR | " .. string.format("%.1f", rates.xpr.rate) 
			end
				
			infoString = infoString ..
				" ]   [ GOLD | " .. comma_value(SumField(sessionData["gold"])) ..
				" ]   [ XP | " .. comma_value(SumField(sessionData["xp"])) ..
				" ]   [ QP | " .. comma_value(SumField(sessionData["qp"])) .. " |" .. ReportField(sessionData["qp"], 1) .. " ]"				
				
			if (tonumber(SumField(sessionData["tp"])) > 0) then			
				infoString = infoString .. "   [ TP | " .. SumField(sessionData["tp"]) .. " |"  .. ReportField(sessionData["tp"], 1)	 .. " ]"
			end
			
			-- pup trains
			if (string.find(ReportField(sessionData["tr"], 1), "pup") ~= nil) then
				infoString = infoString .. "   [ TR | " .. comma_value(SumField(sessionData["tr"])) .. " ]"
			end

			-- instinct trains
			if (string.find(ReportField(sessionData["tr"], 1), "instinct") ~= nil) then
				infoString = infoString .. "   [ iTR | " .. comma_value(SumField(sessionData["tr"]["instinct"])) .. " ]"
			end
						
			infoString = infoString .. "   [ # |" .. ReportField(sessionData["count"], 1) .. " ]"
					
			InfoClear()
			InfoColour(infoFGColor)
			InfoBackground(infoBGColor)
			Info(infoString)
		end
	end		
	
	-- Taken from http://stackoverflow.com/questions/15706270/sort-a-table-in-lua
	function spairs(t, order)
		-- collect the keys
		local keys = {}
		for k in pairs(t) do keys[#keys+1] = k end

		-- if order function given, sort by it by passing the table and keys a, b,
		-- otherwise just sort the keys 
		if order then
			table.sort(keys, function(a,b) return order(t, a, b) end)
		else
			table.sort(keys)
		end

		-- return the iterator function
		local i = 0
		return function()
			i = i + 1
			if keys[i] then
				return keys[i], t[keys[i]]
			end
		end
	end
	
	--------------------
	-- Report Session
	--------------------
	function ReportSession(name, line, wildcards)
		SetReportTo(wildcards[1])
		local infoString = ""			
					
		infoString = infoString .. 
			dispLbl("[") .. dispBLbl("XPR") .. dispLbl("|") .. dispVal(string.format("%.1f", rates.xpr.rate)) .. 
			dispLbl("] [") .. dispBLbl("GOLD") .. dispLbl("|") .. dispVal(string.format("%.1fM", tonumber(SumField(sessionData["gold"])/1000000))) ..
			dispLbl("] [") .. dispBLbl("XP") .. dispLbl("|") .. dispVal(string.format("%.0fK", tonumber(SumField(sessionData["xp"])/1000))) ..
			dispLbl("] [") .. dispBLbl("QP") .. dispLbl("|") .. dispVal(comma_value(SumField(sessionData["qp"]))) .. 
				dispLbl("|") .. dispVal("") .. ReportField(sessionData["qp"], 1, "channel") .. dispLbl("]")				
			
		if (tonumber(SumField(sessionData["tp"])) > 0) then			
			infoString = infoString .. dispLbl(" [") .. dispBLbl("TP") .. dispLbl("|") .. dispVal(SumField(sessionData["tp"])) .. 
				dispLbl("|")  .. ReportField(sessionData["tp"], 1, "channel") .. dispLbl("]")
		end
		
		if (string.find(ReportField(sessionData["tr"], 1, "channel"), "pup") ~= nil) then
			infoString = infoString .. dispLbl(" [") .. dispBLbl("TR") .. dispLbl("|") .. dispVal(comma_value(SumField(sessionData["tr"]))) .. dispLbl("]")
		end

		if sessionData["tr"] ~= nil then
			if (string.find(ReportField(sessionData["tr"]["instinct"], 1, "channel"), "level") ~= nil) then
				infoString = infoString .. dispLbl(" [") .. dispBLbl("iTR") .. dispLbl("|") .. dispVal(comma_value(SumField(sessionData["tr"]["instinct"]))) .. dispLbl("]")
			end
		end
					
		infoString = infoString .. dispLbl(" [") .. dispBLbl("#") .. dispLbl("|") .. ReportField(sessionData["count"], 1, "channel") .. dispLbl("]")
				
		Report(infoString, reportTo)
	end
	
	function ReportTotal(name, line, wildcards)
		SetReportTo(wildcards[1])
		local infoString = ""
				
		local daysExpired = (os.time() - totalStart) / 86400
		local totalGold = tonumber(SumField(totalData["gold"]))
		local totalXP = tonumber(SumField(totalData["xp"]))
		local totalQP = tonumber(SumField(totalData["qp"]))
		local totalTP = tonumber(SumField(totalData["tp"]))			
					
		infoString = infoString .. 				
			dispLbl("[") .. dispBLbl("GOLD") .. dispLbl("|") .. dispVal(string.format("%.1fM", totalGold/1000000)) .. 
				"  " .. dispVal(comma_value( string.format("%.1fM", tostring(totalGold/1000000/daysExpired)))) .. dispLbl("/d") ..
			dispLbl("] [") .. dispBLbl("XP") .. dispLbl("|") .. dispVal(string.format("%.0fK", totalXP/1000)) .. 
				"  " .. dispVal(comma_value( string.format("%.0fK", tostring(totalXP/1000/daysExpired)))) .. dispLbl("/d") ..
			dispLbl("] [") .. dispBLbl("QP") .. dispLbl("|") .. dispVal(comma_value(SumField(totalData["qp"]))) .. 
				"  " .. dispVal(comma_value( string.format("%.0f", tostring(totalQP/daysExpired)))) .. dispLbl("/d") ..
				dispLbl("|") .. dispVal("") .. ReportField(totalData["qp"], 1, "channel") .. dispLbl("]")				
			
		if (tonumber(SumField(totalData["tp"])) > 0) then			
			infoString = infoString .. dispLbl(" [") .. dispBLbl("TP") .. dispLbl("|") .. dispVal(SumField(totalData["tp"])) .. 
				"  " .. dispVal(comma_value( string.format("%.1f", tostring(totalTP/daysExpired)))) .. dispLbl("/d") ..
				dispLbl("|")  .. ReportField(totalData["tp"], 1, "channel") .. dispLbl("]")
		end
		
		if (string.find(ReportField(totalData["tr"], 1, "channel"), "pup") ~= nil) then
			infoString = infoString .. dispLbl(" [") .. dispBLbl("TR") .. dispLbl("|") .. dispVal(comma_value(SumField(totalData["tr"]))) .. dispLbl("]")
		end

		if totalData["tr"] ~= nil then
			if (string.find(ReportField(totalData["tr"]["instinct"], 1, "channel"), "level") ~= nil) then
				infoString = infoString .. dispLbl(" [") .. dispBLbl("iTR") .. dispLbl("|") .. dispVal(comma_value(SumField(totalData["tr"]["instinct"]))) .. dispLbl("]")
			end
		end
					
		infoString = infoString .. dispLbl(" [") .. dispBLbl("#") .. dispLbl("|") .. ReportField(totalData["count"], 1, "channel") .. dispLbl("]")
		
		infoString = infoString .. " " .. SecondsToDays(os.time() - totalStart)
				
		Report(infoString, reportTo)
	end
	
	--------------------
	-- Report history
	--------------------
	function ReportHistory(name, line, wildcards)
		local numEntries = table.getn(timers[wildcards[1]].history)
	
		local startEntry = 1
		if (wildcards[2] ~= "" and wildcards[2] ~= nil) then
			startEntry = numEntries - tonumber(wildcards[2]) + 1	 				
		end
				
		for i = startEntry, numEntries, 1 do
			Report(timers[wildcards[1]].history[i])
		end
	end
	
	--------------------
	-- Report double
	--------------------
	function ReportDouble(name, line, wildcards)
		local reportString = ""
		SetReportTo(wildcards[1])
		if (sessionData["count"] ~= nil and sessionData["count"]["dbl"] ~= nil) then
			reportString = timers["dbl"].history[table.getn(timers["dbl"].history)]
		else
			reportString = " No double report to display"
		end

		Report(reportString, reportTo)
	end
	
	--------------------
	-- Report Stats
	--------------------
	function SetReportTo(channel)
		if (channel ~= nil and channel ~= "") then 
			reportTo = channel
		else
			reportTo = settings.channel
		end
	end

-- Removed original code here

	function ReportStats(name, line, wildcards)
		SetReportTo(wildcards[1])
		local stats = {["str"] = {["val"] = 0, ["base"] = 0}, ["int"] = {["val"] = 0, ["base"] = 0}, ["wis"] = {["val"] = 0, ["base"] = 0}, ["dex"] = {["val"] = 0, ["base"] = 0}, ["con"] = {["val"] = 0, ["base"] = 0}, ["luck"] = {["val"] = 0, ["base"] = 0}, hr = 0, dr = 0, ["hp"] = {["val"] = 0, ["base"] = 0}, ["mana"] = {["val"] = 0, ["base"] = 0}, ["moves"] = {["val"] = 0, ["base"] = 0}}
		SendNoEcho("protocol gmpc sendchar")

		for i,_ in pairs(stats) do
			if i == "hr" or i == "dr" then
				stats[i] = GetGmcp("char.stats." .. i)
			else
				stats[i].base =GetGmcp("char.maxstats.max" .. i)
				if i == "hp" or i == "mana" or i == "moves" then
					stats[i].val = GetGmcp("char.vitals." .. i)
				else
					stats[i].val = GetGmcp("char.stats." ..i)
				end
			end
		end

		local reportString = ""
		
		for i, stat in ipairs(statOrder) do
			reportString = reportString .. dispLbl("[") .. dispBLbl(abbreviations[stat] or stat) .. dispLbl("|") .. dispVal(stats[stat].val or stats[stat])
			if (stats[stat].base ~= nil) then
				reportString = reportString .. dispLbl("/") .. dispLbl(stats[stat].base)
			end
			reportString = reportString .. dispLbl("] ")
		end
		
		Report(reportString, reportTo)
	end
	
	--------------------
	-- Report Mastery
	--------------------
	function ReportMastery(name, line, wildcards)
		SetReportTo(wildcards[1])
		mastery = {}
		EnableTriggerGroup("mastery", true)
		SendNoEcho("mastery")	
	end
	
	function MasteryCapture(name, line, wildcards)			
		mastery[wildcards[1]] = wildcards[2]
		
		if (IsTimer("report_mastery_timer") ~= error_code.eOK) then					
			AddTimer("report_mastery_timer", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot, "ReportMasteryComplete")
		else
			ResetTimer("report_mastery_timer")
		end
	end
	
	function ReportMasteryComplete()
		EnableTriggerGroup("mastery", false)
		local reportString = ""
		
		for mast, amount in spairs(mastery, function(t,a,b) return tonumber(t[a]) > tonumber(t[b]) end) do			
			if (tonumber(amount) > 0) then
				reportString = reportString .. dispLbl("[") .. dispBLbl(mast) .. dispLbl("|") .. dispVal(amount) .. dispLbl("] ")
			end
		end
		
		Report(reportString, reportTo)
	end
	
	--------------------
	-- Report Instinct
	--------------------
	function ReportInstinct(name, line, wildcards)
		SetReportTo(wildcards[1])
		instinct = {}
		EnableTriggerGroup("instinct", true)
		SendNoEcho("instinct")	
	end
	
	function InstinctCapture(name, line, wildcards)			
		instinct[wildcards.skill:gsub("^%s*(.-)%s*$", "%1")] = wildcards.amount
		
		if (IsTimer("report_instinct_timer") ~= error_code.eOK) then					
			AddTimer("report_instinct_timer", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot, "ReportInstinctComplete")
		else
			ResetTimer("report_instinct_timer")
		end
	end
	
	function ReportInstinctComplete()
		EnableTriggerGroup("instinct", false)
		local reportString = ""
		
		for skill, amount in spairs(instinct, function(t,a,b) return tonumber(t[a]) > tonumber(t[b]) end) do			
			if (tonumber(amount) > 0) then
				reportString = reportString .. dispLbl("[") .. dispBLbl(skill) .. dispLbl("|") .. dispVal(amount) .. dispLbl("] ")
			end
		end
		
		Report(reportString, reportTo)
	end

	--------------------
	-- Report Resists
	--------------------
	function ReportResists(name, line, wildcards)
		SetReportTo(wildcards[1])
		resists = {}
		EnableTriggerGroup("resist", true)
		SendNoEcho("resists")	
	end
	
	function ResistCapture(name, line, wildcards)					
		resists[wildcards.damtype:gsub("^%s*(.-)%s*$", "%1")] = wildcards.amount
		
		if (IsTimer("report_resists_timer") ~= error_code.eOK) then					
			AddTimer("report_resists_timer", 0, 0, .1, "", timer_flag.Enabled + timer_flag.OneShot, "ReportResistsComplete")
		else
			ResetTimer("report_resists_timer")
		end
	end
	
	function ReportResistsComplete()
		EnableTriggerGroup("resist", false)
		local reportString = ""
				
		for damtype, amount in spairs(resists, function(t,a,b) return tonumber(t[a]) > tonumber(t[b]) end) do						
			if (tonumber(amount) > 0) then
				reportString = reportString .. dispLbl("[") .. dispBLbl(damtype) .. dispLbl("|") .. dispVal(amount) .. dispLbl("] ")
			end
		end
		
		Report(reportString, reportTo)
	end




	function Report(reportString, channel)	
		if reportString ~= nil then	
			if channel == nil then
				channel = settings.channel
			end

			channel = trim(channel)

			if channel == "default" then
				CallPlugin("b555825a4a5700c35fa80780","storeFromOutside", settings.labelColor .. "[" .. settings.blabelColor .. "DULL" .. settings.labelColor .. "] @w" .. reportString)
			else				
				SendNoEcho(channel .. " " .. reportString)
			end
		end
	end
	
	-------------------
	-- Field utilities
	-------------------
	function ReportField(field, levels, infoOrchannel)
		local reportString = ""
		local spacing = "  "
		if (infoOrchannel == "channel") then spacing = " " end
		
		if (field ~= nil) then	
			if (type(field) == "table") then
				if (levels > 0) then
					for key, val in pairs(field) do
						local lbl = key
						local val = comma_value(ReportField(val, levels-1, infoOrchannel))
						
						if (infoOrchannel == "channel") then
							reportString = reportString .. spacing .. dispVal(val) .. dispLbl(lbl)
						else
							reportString = reportString .. spacing .. val .. lbl
						end
					end
				else
					reportString = tostring(SumField(field))
					
					if (infoOrchannel == "channel") then											
						reportString = dispVal(reportString)
					end
				end
			else
				reportString = tostring(field)
				
				if (infoOrchannel == "channel") then											
					reportString = dispVal(reportString)
				end
			end
		end
		
		return reportString
	end
	
	function SumField(field)
		local fieldTotal = 0
		
		if (field ~= nil) then
			if (type(field) == "table")	then		
				for key, val in pairs(field) do				
					fieldTotal = fieldTotal + tonumber(SumField(val))
				end
			else			
				fieldTotal = tonumber(field)
			end		
		end
		
		return fieldTotal
	end
	
	function split(str)		
		 local subStrings = {}		 
		 
		 for subStr in string.gmatch(str, "([^_]+)") do			
			table.insert(subStrings, subStr)			
		 end
		 
		 return subStrings
	 end
	 
	function trim(s)
		return (s:gsub("^%s*(.-)%s*$", "%1"))
	end

	function comma_value(n) -- credit http://richard.warburton.it
		local left,num,right = string.match(n,'^([^%d]*%d)(%d*)(.-)$')
		return left..(num:reverse():gsub('(%d%d%d)','%1,'):reverse())..right
	end
]]>
</script>

</muclient>

  