<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, September 23, 2018, 5:02 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Poker" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Poker"
   author="Castiel"
   id="9ea3ad53c3e0ee47b72692c3"
   language="Lua"
   purpose="Easier display of Poker Cards"
   save_state="y"
   date_written="2018-09-23 17:02:00"
   requires="4.84"
   version="1.0"
   >
   <description trim="n">
   		<![CDATA[
.----------------------------------------------------------------------------.
| Loqui Poker Tracker Help                                                   |
|----------------------------------------------------------------------------|
|lpt help -- Brings up the help section. (What you are reading now)          |
|                                                                            |
|lpt check              -- Checks (bag if set/inventory) for aarch items.    |
|lpt bag <container ID> -- Sets the bag (Uses ID in identify) to use. Set it |
|                          to 0 to use inventory.                            |
'----------------------------------------------------------------------------'
]]>
</description>
</plugin>

<aliases>
	<alias script="Help" match="^lpt help$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="UpdateItems" match="^lpt check$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="SetBag" match="^lpt bag (.*)$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
</aliases>

<triggers>
	<trigger group="invdata_poker" regexp="y" match="^{invdata(.*)?}$" enabled="n" sequence="100" omit_from_output="y" script="StartCapture"></trigger>
	<trigger group="invdata_poker" regexp="y" match="^(?<id>.*),(?<flags>.*),(?<item>.*),(?<lvl>.*),(?<type>.*),(?<unique>.*),(?<wear>.*),(?<timer>.*)$" enabled="n" sequence="100" omit_from_output="y" script="Capture"></trigger>
	<trigger group="invdata_poker" regexp="y" match="^{/invdata}$" enabled="n" sequence="100" omit_from_output="y" script="StopCapture"></trigger>
</triggers>

<include name="constants.lua"/>

<script>
<![CDATA[
	local bagID = (GetVariable("bagID") or 0)
	local pokerTable = {
		["2"]         = { order=0,  fire = 0, water = 0, air = 0, earth = 0 },
		["3"]         = { order=1,  fire = 0, water = 0, air = 0, earth = 0 },
		["4"]         = { order=2,  fire = 0, water = 0, air = 0, earth = 0 },
		["5"]         = { order=3,  fire = 0, water = 0, air = 0, earth = 0 },
		["6"]         = { order=4,  fire = 0, water = 0, air = 0, earth = 0 },
		["7"]         = { order=5,  fire = 0, water = 0, air = 0, earth = 0 },
		["8"]         = { order=6,  fire = 0, water = 0, air = 0, earth = 0 },
		["9"]         = { order=7,  fire = 0, water = 0, air = 0, earth = 0 },
		["ten"]       = { order=8,  fire = 0, water = 0, air = 0, earth = 0 },
		["mephit"]    = { order=9,  fire = 0, water = 0, air = 0, earth = 0 },
		["demon"]     = { order=10, fire = 0, water = 0, air = 0, earth = 0 },
		["elemental"] = { order=11, fire = 0, water = 0, air = 0, earth = 0 },
		["ace"]       = { order=12, fire = 0, water = 0, air = 0, earth = 0 } }

	local pokerLookup = {
		["|2[Two of Fire]2|"]        = { suit = "fire",  value = "2" },
		["|2[Two of Air]2|"]         = { suit = "air",   value = "2" },
		["|2[Two of Earth]2|"]       = { suit = "earth", value = "2" },
		["|2[Two of Water]2|"]       = { suit = "water", value = "2" },
		["|3[Three of Fire]3|"]      = { suit = "fire",  value = "3" },
		["|3[Three of Air]3|"]       = { suit = "air",   value = "3" },
		["|3[Three of Earth]3|"]     = { suit = "earth", value = "3" },
		["|3[Three of Water]3|"]     = { suit = "water", value = "3" },
		["|4[Four of Fire]4|"]       = { suit = "fire",  value = "4" },
		["|4[Four of Air]4|"]        = { suit = "air",   value = "4" },
		["|4[Four of Earth]4|"]      = { suit = "earth", value = "4" },
		["|4[Four of Water]4|"]      = { suit = "water", value = "4" },
		["|5[Five of Fire]5|"]       = { suit = "fire",  value = "5" },
		["|5[Five of Air]5|"]        = { suit = "air",   value = "5" },
		["|5[Five of Earth]5|"]      = { suit = "earth", value = "5" },
		["|5[Five of Water]5|"]      = { suit = "water", value = "5" },
		["|6[Six of Fire]6|"]        = { suit = "fire",  value = "6" },
		["|6[Six of Air]6|"]         = { suit = "air",   value = "6" },
		["|6[Six of Earth]6|"]       = { suit = "earth", value = "6" },
		["|6[Six of Water]6|"]       = { suit = "water", value = "6" },
		["|7[Seven of Fire]7|"]      = { suit = "fire",  value = "7" },
		["|7[Seven of Air]7|"]       = { suit = "air",   value = "7" },
		["|7[Seven of Earth]7|"]     = { suit = "earth", value = "7" },
		["|7[Seven of Water]7|"]     = { suit = "water", value = "7" },
		["|8[Eight of Fire]8|"]      = { suit = "fire",  value = "8" },
		["|8[Eight of Air]8|"]       = { suit = "air",   value = "8" },
		["|8[Eight of Earth]8|"]     = { suit = "earth", value = "8" },
		["|8[Eight of Water]8|"]     = { suit = "water", value = "8" },
		["|9[Nine of Fire]9|"]       = { suit = "fire",  value = "9" },
		["|9[Nine of Air]9|"]        = { suit = "air",   value = "9" },
		["|9[Nine of Earth]9|"]      = { suit = "earth", value = "9" },
		["|9[Nine of Water]9|"]      = { suit = "water", value = "9" },
		["|10[Ten of Fire]10|"]      = { suit = "fire",  value = "ten" },
		["|10[Ten of Air]10|"]       = { suit = "air",   value = "ten" },
		["|10[Ten of Earth]10|"]     = { suit = "earth", value = "ten" },
		["|10[Ten of Water]10|"]     = { suit = "water", value = "ten" },
		["|M[Mephit of Fire]M|"]     = { suit = "fire",  value = "mephit" },
		["|M[Mephit of Air]M|"]      = { suit = "air",   value = "mephit" },
		["|M[Mephit of Earth]M|"]    = { suit = "earth", value = "mephit" },
		["|M[Mephit of Water]M|"]    = { suit = "water", value = "mephit" },
		["|D[Demon of Fire]D|"]      = { suit = "fire",  value = "demon" },
		["|D[Demon of Air]D|"]       = { suit = "air",   value = "demon" },
		["|D[Demon of Earth]D|"]     = { suit = "earth", value = "demon" },
		["|D[Demon of Water]D|"]     = { suit = "water", value = "demon" },
		["|E[Elemental of Fire]E|"]  = { suit = "fire",  value = "elemental" },
		["|E[Elemental of Air]E|"]   = { suit = "air",   value = "elemental" },
		["|E[Elemental of Earth]E|"] = { suit = "earth", value = "elemental" },
		["|E[Elemental of Water]E|"] = { suit = "water", value = "elemental" },
		["|A[Ace of Fire]A|"]        = { suit = "fire",  value = "ace" },
		["|A[Ace of Air]A|"]         = { suit = "air",   value = "ace" },
		["|A[Ace of Earth]A|"]       = { suit = "earth", value = "ace" },
		["|A[Ace of Water]A|"]       = { suit = "water", value = "ace" } }

	function Help()
		ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))
	end

	function SetBag(name, line, wildcards)
		bagID = wildcards[1]
		SetVariable("bagID", bagID)
		ColourNote("orange", "", "Bag ID set to: " .. bagID .. ".")
	end

	function UpdateItems(name, line, wildcards)
		ColourNote("orange", "", "Refreshing item list.")
		if tonumber(bagID) == 0 then
			SendNoEcho("invdata ansi")
		else
			SendNoEcho("invdata " .. bagID .. " ansi")
		end
		EnableTriggerGroup("invdata_poker", true)
	end

	function StartCapture(name, line, wildcards)
		for key, value in pairs(pokerTable) do --Reset Poker Table
			value.fire = 0
			value.air = 0
			value.earth = 0
			value.water = 0
		end
	end

	function StopCapture(name, line, wildcards)
		EnableTriggerGroup("invdata_poker", false)
		local rfFire, rfAir, rfEarth, rfWater = -1, -1, -1, -1
		local fKind = 0

		ColourNote("white", "", "Card ", "orange", "", "| ", "red", "", "Fire ", "orange", "", "| ", "cyan", "", " Air", "orange", "", " |", "gold", "", " Earth", "orange", "", " |", "blue", "", " Water")
		ColourNote("orange", "", "-----+------+------+-------+------")
		for name, value in spairs(pokerTable, function(t,a,b) return t[a].order > t[b].order end) do
			ColourTell("white", "", string.format("%5.5s", name), "orange", "", "|")
			if value.fire > 0 then
				ColourTell("lime", "", string.format("%5i", value.fire))
			else
				ColourTell("white", "", string.format("%5i", value.fire))
			end
			ColourTell("orange", "", " |")
			if value.air > 0 then
				ColourTell("lime", "", string.format("%5i", value.air))
			else
				ColourTell("white", "", string.format("%5i", value.air))
			end
			ColourTell("orange", "", " |")
			if value.earth > 0 then
				ColourTell("lime", "", string.format("%6i", value.earth))
			else
				ColourTell("white", "", string.format("%6i", value.earth))
			end
			ColourTell("orange", "", " |")
			if value.water > 0 then
				ColourTell("lime", "", string.format("%5i", value.water))
			else
				ColourTell("white", "", string.format("%5i", value.water))
			end

			if value.order >= 8 then
				if rfFire == -1 or value.fire < rfFire then
					rfFire = value.fire
				end
				if rfAir == -1 or value.air < rfAir then
					rfAir = value.air
				end
				if rfEarth == -1 or value.earth < rfEarth then
					rfEarth = value.earth
				end
				if rfWater == -1 or value.water < rfWater then
					rfWater = value.water
				end
			end

			if value.order <= 7 and (value.fire + value.air + value.earth + value.water) >= 4 then
				ColourTell("orange", "", " (", "lime", "", math.floor((value.fire + value.air + value.earth + value.water)/4) .. " x ", "white", "", "4 of a Kind!", "orange", "", ")")
				fKind = fKind + math.floor((value.fire + value.air + value.earth + value.water)/4)
			end
			ColourTell("orange", "", "\n\r")
		end
		ColourNote("orange", "", "\n\rHands worth handing in:")
		ColourNote("orange", "", "[", "lime", "", "50", "white", "", "QP", "orange", "", "] Royal Flush   : A, E, D, M, 10, same suit.")
		ColourNote("orange", "", "[", "lime", "", "35", "white", "", "QP", "orange", "", "] 4 of a Kind   : Any 4 cards of same face value, any suit.")
		if rfFire > 0 or rfAir > 0 or rfEarth > 0 or rfWater > 0 or fKind > 0 then --We have at LEAST one hand!
			local total = 0
			ColourNote("orange", "", "\n\rYou currently have the following hands:")
			if rfFire > 0 then
				ColourNote("orange", "", "Royal Flush[", "red", "", "Fire", "orange", "", "] : ", "lime", "", rfFire, "white", "", "x", "lime", "", "50", "white", "", "QP=", "lime", "", rfFire*50)
				total = total + (rfFire * 50)
			end
			if rfAir > 0 then
				ColourNote("orange", "", "Royal Flush[", "cyan", "", "Air", "orange", "", "]  : ", "lime", "", rfAir, "white", "", "x", "lime", "", "50", "white", "", "QP=", "lime", "", rfAir*50)
				total = total + (rfAir * 50)
			end
			if rfEarth > 0 then
				ColourNote("orange", "", "Royal Flush[", "gold", "", "Earth", "orange", "", "]: ", "lime", "", rfEarth, "white", "", "x", "lime", "", "50", "white", "", "QP=", "lime", "", rfEarth*50)
				total = total + (rfEarth * 50)
			end
			if rfWater > 0 then
				ColourNote("orange", "", "Royal Flush[", "blue", "", "Air", "orange", "", "]  : ", "lime", "", rfWater, "white", "", "x", "lime", "", "50", "white", "", "QP=", "lime", "", rfWater*50)
				total = total + (rfWater * 50)
			end
			if fKind >= 1 then
				ColourNote("orange", "", "4 of a Kind       :", "lime", "", " " .. fKind, "white", "", "x", "lime", "", "35", "white", "", "QP=", "lime", "", (fKind*35), "white", "", "!")
				total = total + (fKind * 35)
			end
			ColourNote("orange", "", "Total QP value    : ", "lime", "", total)
		end
	end

	function Capture(name, line, wildcards, styles)
		local itemName = wildcards.item
		local pCount = 0

		if pokerLookup[itemName] == nil then
			return
		end

		local suit = pokerLookup[itemName].suit
		local value = pokerLookup[itemName].value
		if suit == "fire" then
			pokerTable[value].fire = pokerTable[value].fire + 1
		elseif suit == "air" then
			pokerTable[value].air = pokerTable[value].air + 1
		elseif suit == "earth" then
			pokerTable[value].earth = pokerTable[value].earth + 1
		elseif suit == "water" then
			pokerTable[value].water = pokerTable[value].water + 1
		end
	end

	function spairs(t, order)
         -- collect the keys
         local keys = {}
         for k in pairs(t) do keys[#keys+1] = k end

         -- if order function given, sort by it by passing the table and keys a, b,
         -- otherwise just sort the keys 
         if order then
            table.sort(keys, function(a,b) return order(t, a, b) end)
         else
            table.sort(keys)
         end

         -- return the iterator function
         local i = 0
         return function()
            i = i + 1
            if keys[i] then
               return keys[i], t[keys[i]]
            end
         end
      end

]]>
</script>


</muclient>