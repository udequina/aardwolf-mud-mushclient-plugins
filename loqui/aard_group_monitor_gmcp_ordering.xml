<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Group_Monitor"
   author="Fiendish, modded by Castiel"
   id="f178e68512c685b3be1e9b07"
   language="Lua"
   purpose="Aardwolf Group Monitor"
   date_written="2010-12-13 15:35:02"
   requires="4.73"
   version="2.0"
   save_state="y"
>

<description trim="y">

Aardwolf Group Monitor

Gives a persistant visual display of the status of your group members using
details captured through GMCP.

<![CDATA[
commands:
groupmode  -- toggle between default and epic mode

grp order # <player>  -- set the order of a player in the window
grp top <player>      -- send a player to the top of the order
grop bottom <player>  -- send a player to the bottom of the order
]]>
</description>

</plugin>

<aliases>

<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>

-- show the group window
<alias
   match="groupon"
   enabled="y"
   sequence="100"
   omit_from_output="y"
   script="ShowIt"
></alias>

-- hide the group window
<alias
   match="groupoff"
   enabled="y"
   sequence="100"
   omit_from_output="y"
   script="HideIt"
></alias>

<alias
   regexp="y" match="^grp order$"
   enabled="y" script="ShowOrder"
></alias>

<alias
   regexp="y" match="^grp order ([0-9]+) (.*)"
   enabled="y" script="SetPlayerOrder"
></alias>

<alias
   regexp="y" match="^grp top (.*)"
   enabled="y" script="SetPlayerOrderTop"
></alias>

<alias
   regexp="y" match="^grp bottom (.*)"
   enabled="y" script="SetPlayerOrderBottom"
></alias>


-- Switch group display mode
<alias
   match="groupmode"
   enabled="y"
   sequence="100"
   omit_from_output="y"
   script="SwapMode"
></alias>

</aliases>

<triggers>
<trigger
   enabled="y"
   match="^(\w+) has invited you to join group: (.*)\.$"
   script="group_invite"
   regexp="y"
   sequence="100"
   custom_colour="17"
   other_text_colour="#FFFFFF"
   other_back_colour="#0000FF"
></trigger>

<trigger
   enabled="y"
   match="^(\w+) has cancelled your invitation to join group: (.*)\.$"
   script="group_cancel"
   regexp="y"
   sequence="100"
   custom_colour="17"
   other_text_colour="#FFFFFF"
   other_back_colour="#FF0000"
></trigger>

<trigger
   enabled="y"
   match="^You have declined the group invitation from (\w+)\.$"
   script="group_cancel"
   regexp="y"
   sequence="100"
   custom_colour="17"
   other_text_colour="#FFFFFF"
   other_back_colour="#FF0000"
></trigger>

<trigger
   enabled="y"
   match="^You have no invitation outstanding from (\w+)\.$"
   script="group_cancel"
   regexp="y"
   sequence="100"
   custom_colour="17"
   other_text_colour="#FFFFFF"
   other_back_colour="#FF0000"
></trigger>

<trigger
   enabled="y"
   match="^Your group invite from (\w+) is cancelled because the group has been disbanded\.$"
   script="group_cancel"
   regexp="y"
   sequence="100"
   custom_colour="17"
   other_text_colour="#FFFFFF"
   other_back_colour="#FF0000"
></trigger>

<trigger
   enabled="y"
   match="^Your group invitation from (\w+) is cancelled because (\w+) has left that group\.$"
   script="group_cancel"
   regexp="y"
   sequence="100"
   custom_colour="17"
   other_text_colour="#FFFFFF"
   other_back_colour="#FF0000"
></trigger>

<trigger
   enabled="y"
   match="^Your group invitation from (\w+) is cancelled because (\w+) has left the game\.$"
   script="group_cancel"
   regexp="y"
   sequence="100"
   custom_colour="17"
   other_text_colour="#FFFFFF"
   other_back_colour="#FF0000"
></trigger>
</triggers>

<script>
<![CDATA[

require "gauge"
require "movewindow"
require "mw"
require "gmcphelper"
require "copytable"
require "serialize"
require "commas"

groupMode = tonumber(GetVariable("groupMode") or "0")
background_colour = tonumber (GetVariable ("background_colour")) or 0x000000
title_colour = tonumber (GetVariable ("title_colour")) or 0x292929
default_x = 868
default_y = 336
default_height = 215
default_width = 269
height = tonumber (GetVariable ("height")) or default_height
width = tonumber (GetVariable ("width")) or default_width
show_self = tonumber (GetVariable ("show_self")) or 1
show_hp = tonumber (GetVariable ("show_hp")) or 1
show_mn = tonumber (GetVariable ("show_mn")) or 1
show_mv = tonumber (GetVariable ("show_mv")) or 1
hidden = tonumber (GetVariable ("hidden")) or 0
flat_gauges = tonumber (GetVariable("flat_gauges")) or 0
overlay_numbers = tonumber (GetVariable("overlay_numbers")) or 0
GAP = 3
font_size = 0
font_name = ""
border_color = 0xdddddd
title_gradient_col1 = 0x000000
title_gradient_col2 = 0x444444
group_members = {}
group_info = {}

group_order = {}

shrink_title_width = 420

local defaultColorVals = {Health={0x00ff00,0x004400}, Mana={0xff5500,0x442200}, Moves={0x00ffff,0x004444}, Align={0x0000ff,0x00ffff}}
colorVals = defaultColorVals
assert (loadstring (GetVariable ("colorVals") or "")) ()

thresh1active = tonumber (GetVariable("thresh1active")) or 0
thresh2active = tonumber (GetVariable("thresh2active")) or 0
thresh1percent = tonumber (GetVariable("thresh1percent")) or 40
thresh2percent = tonumber (GetVariable("thresh2percent")) or 20
thresh1color = tonumber (GetVariable("thresh1color")) or 0x00ffff
thresh2color = tonumber (GetVariable("thresh2color")) or 0x0000ff

local barIndex = {"Health", "Mana", "Moves", "Align"}

RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100

-- Variables not saved.
startx      = ""  
starty      = ""
posx        = "" 
posy        = ""
font_height = 0
hidden_members = {}

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

-- functions for handling Aardwolf color codes
dofile (GetPluginInfo (GetPluginID(), 20) .. "aardwolf_colors.lua")

function SwapMode()
   if groupMode == 0 then
      groupMode = 1
      SetVariable("groupMode", 1)
      ColourNote("orange", "black", "Epic mode enabled.")
   else
      groupMode = 0
      SetVariable("groupMode", 0)
      ColourNote("orange", "black", "Default mode enabled.")
   end

   DisplayGroupPage()
end

function reset_aard()
   width = default_width
   height = default_height
   font_name = default_font_name
   font_size = default_font_size
   windowinfo.window_left = default_x
   windowinfo.window_top = default_y
   WindowPosition(win, default_x, default_y, 0, 18)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   OnPluginSaveState()
   OnPluginInstall()
end

function SetUpHotspotsAndDraw(firstTime)
   -- don't use windowcreate after the first time, because it messes with hotspot handlers
   if (firstTime == true) then
      check (WindowCreate (win, 
         windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
         width,     -- width
         height,  -- height
         windowinfo.window_mode,       -- auto-position: middle right
         windowinfo.window_flags,  -- flags
         background_colour) )
      -- Add the drag handler so they can move the window around
      movewindow.add_drag_handler (win, 0, 0, 0, 0)

      -- Add handler for resizing
      WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
      WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win) -- fail silently
      if hidden == 0 then
         WindowShow (win, true)
      end
   else
      -- everything has already been made
      -- just move them back into place
      WindowResize(win, width, height, background_colour)
      WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end
   DisplayGroupPage()
end

string.lpad = function(str, len, char)
   if char == nil then char = ' ' end
   return string.rep(char, len - #str) .. str
end

string.rpad = function(str, len, char)
   if char == nil then char = ' ' end
   return str .. string.rep(char, len - #str)
end

function RemoveMembersFromGroupDisplay()
   group_data = copytable.deep(full_group_data)
   if (group_data ~= nil) and (group_data["members"] ~= nil) then
      -- add to bottom of grouping order if there's a new member
      local orderedCount = 0
      for player, order in pairs(group_order) do
         orderedCount = orderedCount + 1
      end

      -- add any new members to the grouping order while also seeing who is still in group
      local newGroupOrder = {}
      for i,v in ipairs(group_data["members"]) do
         if group_order[v["name"]] == nil then
            orderedCount = orderedCount + 1            
            group_order[v["name"]] = orderedCount
            
         end

         newGroupOrder[v["name"]] = group_order[v["name"]]
      end
      group_order = newGroupOrder   
      ReOrderGroup()
   
      -- hide self if applicable
      if (show_self == 0) and (char_data ~= nil) then
         for i,v in ipairs(group_data["members"]) do
            if v["name"] == char_data["name"] then
               table.remove(group_data["members"], i)
            end
         end
      end
       
      -- hide other hidden members (inefficient method, but who cares)
      for k,v in pairs(hidden_members) do
         for i,v in ipairs(group_data["members"]) do
            if v["name"] == k then
               table.remove(group_data["members"], i)
               break
            end
         end
      end
   end
end

-- put all current group members into the hidden_members list
function hideAllMembers()
   hidden_members = {}
   if full_group_data and full_group_data["members"] and char_data and char_data["name"] then
      for i,v in ipairs(full_group_data["members"]) do
         if v["name"] ~= char_data["name"] then
            hidden_members[v["name"]] = true
         end
      end
   end
   RemoveMembersFromGroupDisplay()
end

-- build and draw the group display
function DisplayGroupPage()
   WindowRectOp(win, 2, 2,2,-2,-2,background_colour) -- blank
   
   
   if width <= shrink_title_width then 
      title_height = line_height*2+3
   else
      title_height = line_height*1+3
   end
   
   -- title rectangle
   WindowGradient(win, 2, 2, -2, title_height, title_gradient_col1, title_gradient_col2, 2)
   WindowLine(win, 0, title_height, width, title_height, 0xeeeeee, 0, 1)

   if not group_built then
      if next(invitations) == nil then
         txt = "No Group To Display"
         txtlen = WindowTextWidth(win,font_id, txt)
         WindowText(win, font_id, txt, (width-txtlen)/2, title_height/4, 0, 0, 0xeeeeee, utf8)
         txt = "Group info will appear here"
         txtlen = WindowTextWidth(win,font_id,txt)
         WindowText (win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee, utf8)
         txt = "once you create or join one."
         txtlen = WindowTextWidth(win,font_id,txt)
         WindowText (win, font_id, txt, (width-txtlen)/2, height/2+font_height, 0, 0, 0xeeeeee, utf8)
      else
         local lines = {}
         txt = "Pending Group Invitations"
         txtlen = WindowTextWidth(win, font_id, txt)
         WindowText(win, font_id, txt, (width-txtlen)/2, title_height/4, 0, 0, 0xeeeeee, utf8)
         table.insert(lines, "[ Leader     : Group Name ]")
         table.insert(lines, "---------------------------")
         for k,v in pairs(invitations) do
            table.insert(lines, string.rpad(k,12).." : "..v)
         end
         for i,v in ipairs(lines) do
            WindowText(win, font_id, v, GAP*4, (title_height) + (i*line_height), 0, 0, 0xeeeeee, utf8)
         end
      end
   else
      styles = ColoursToStyles(group_data["groupname"])
      local x = GAP
      local y = 2            
      for _, v in ipairs (styles) do
         x = x + WindowText (win, font_id, v.text, x, y, 0, 0, v.textcolour)
      end -- for each style run
        
     x = x + WindowText(win, font_id, "  "..group_data["leader"].."  ", x, y, 0, 0, 0xffffff, utf8)       
     
     if width <= shrink_title_width then 
      y = y + line_height 
      x = GAP
     end     
     
     x = x + WindowText(win, font_id, group_data["status"].."  "  , x, y, 0, 0, ((group_data["status"]=="Private" and 0x0000ff) or 0x00ff00), utf8)              
     x = x + WindowText(win, font_id, commas(group_data["exp"]).."|"..commas(group_data["kills"]), x+GAP, y, 0,0, 0xeeeeee, utf8)              
     
      y = title_height
      
      if #group_data["members"] > 0 then
         -- MAIN DISPLAY BODY
      if groupMode == 0 then
         local baseX = GAP
         local baseY = title_height
         local widthInChars = 26
         column_width = WindowTextWidth(win, font_id, string.rep("W", widthInChars))+GAP*2
         if overlay_numbers == 0 then
            column_width = column_width+WindowTextWidth(win, font_id, "WWWW")
         end
         num_columns = math.max(math.floor(width / column_width), 1)
         members_per_col = math.ceil((#group_data["members"])/num_columns)
         labels_width = math.max(WindowTextWidth(win, font_id, "HP"), WindowTextWidth(win, font_id, "MN"), WindowTextWidth(win, font_id, "MV"))
         bar_width = column_width - GAP*2
         if overlay_numbers == 0 then
            bar_width = bar_width - WindowTextWidth(win, font_id, "88888 | 88888")
         end         
         for i,v in spairs(group_data["members"], function(t,a,b) return group_order[t[a].name] < group_order[t[b].name] end) do                              
            local player_column = group_order[v.name] % num_columns
            if player_column == 0 then player_column = num_columns end            
            if (player_column ~= 1) then                                                            
               y = baseY
               baseX = baseX + column_width
               x = baseX
            else    
               baseX = GAP           
               baseY = y + GAP-1
               y = baseY 
               x = baseX
            end         

           -- txt = "["..(("P" and v["info"]["status"]["poisoned"] == true) or "_")..
           --     (("B" and v["info"]["status"]["blind"] == true) or "_")..
           --     (("W" and v["info"]["status"]["webbed"] == true) or "_")..
           --     (("C" and v["info"]["status"]["cursed"] == true) or "_")..
           --     (("*" and v["info"]["status"]["attacked"] == true) or "_").."]"
           -- WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8)
           -- x = x + math.max(WindowTextWidth(win, font_id, "[PBWC*]"), WindowTextWidth(win, font_id, "[_____]")) + GAP
            text_colour = ((v.info.here == "1" and 0xeeeeee) or (0x999999))
            
            local qAndTnl = "|"..v["info"]["qt"].."|"..v["info"]["tnl"]
            local playerLevel = string.lpad(v["info"]["lvl"], 3, ' ').."|"            

            local charsForName = widthInChars - string.len(qAndTnl) - string.len(playerLevel) 
                        
            txt = playerLevel .. string.rpad(string.sub(v["name"], 1, charsForName), charsForName, ' ') .. qAndTnl
            zeroed_alignment = v["info"]["align"]+2500
            name_colour = ((zeroed_alignment<=1625 and colorVals["Align"][1]) or ((zeroed_alignment>=3375 and colorVals["Align"][2]) or 0xeeeeee))            

            x = x + WindowText(win, font_id, txt, x, y, 0, 0, name_colour, utf8) + GAP            
            y = y + line_height + 1

            if show_hp == 1 then -- HP BAR
               x = baseX
               --WindowText(win, font_id, "HP", x, y, 0, 0, 0xeeeeee, utf8)               
               local hpColor1 = colorVals["Health"][1]
               local hpColor2 = colorVals["Health"][2]
               local hpPercent = 100
               if tonumber(v["info"]["hp"]) and tonumber(v["info"]["mhp"]) then
                  hpPercent = 100* (tonumber(v["info"]["hp"]) / tonumber(v["info"]["mhp"]))
               end
               if thresh1active == 1 then
                  if hpPercent < thresh1percent then
                     hpColor1 = thresh1color
                     hpColor2 = thresh1color
                  end
               end
               if thresh2active == 1 then
                  if hpPercent < thresh2percent then
                     hpColor1 = thresh2color
                     hpColor2 = thresh2color
                  end
               end
               gauge(win, v["name"].."'s HP", tonumber(v["info"]["hp"]), tonumber(v["info"]["mhp"]), x, y, bar_width, line_height, hpColor1, 0x000000, 0, 0x000000, hpColor2, nil, flat_gauges==1)
               txt = string.lpad(v["info"]["hp"], 5, ' ').." | ".. math.floor(hpPercent) .. "%"               
               if overlay_numbers == 1 then
                  txtlen = WindowTextWidth(win,font_id,txt)
                  outlined_text(win, font_id, txt, baseX+((bar_width-txtlen)/2)+(GAP), y, 0, 0, text_colour, utf8)
               else
                  WindowText(win, font_id, txt, baseX+bar_width+(2*GAP), y, 0, 0, text_colour, utf8)
               end
               y = y + line_height + 1
            end

            local compact_bar_width = 0
            if show_mn == 1 then-- MANA BAR   
               if show_mv == 1 then
                  compact_bar_width = bar_width/2
               else
                  compact_bar_width = bar_width
               end

               x = baseX
               --WindowText(win, font_id, "MN", x, y, 0, 0, 0xeeeeee, utf8)               
               gauge(win, v["name"].."'s MN", tonumber(v["info"]["mn"]), tonumber(v["info"]["mmn"]), x, y, compact_bar_width, line_height, colorVals["Mana"][1], 0x000000, 0, 0x000000, colorVals["Mana"][2], nil, flat_gauges==1)
               txt = string.lpad(v["info"]["mn"],5,' ')--.."/"..string.rpad(v["info"]["mmn"],5,' ')
               if overlay_numbers == 1 then
                  txtlen = WindowTextWidth(win,font_id,txt)
                  x = x + compact_bar_width
                  outlined_text(win, font_id, txt, baseX+((compact_bar_width-txtlen)/2)+(GAP), y, 0, 0, text_colour, utf8)
               else
                  x = x + WindowText(win, font_id, txt, baseX+compact_bar_width+(2*GAP), y, 0, 0, text_colour, utf8)
               end

               if show_mv ~= 1 then
                  y = y + line_height + 1
               end
            end

            if show_mv == 1 then -- MOVES BAR
               if show_mn == 1 then
                  compact_bar_width = bar_width/2
               else
                  compact_bar_width = bar_width
                  x = baseX                  
               end
               
               --WindowText(win, font_id, "MV", x, y, 0, 0, 0xeeeeee, utf8)               
               gauge(win, v["name"].."'s MV", tonumber(v["info"]["mv"]), tonumber(v["info"]["mmv"]), x, y, compact_bar_width, line_height, colorVals["Moves"][1], 0x000000, 0, 0x000000, colorVals["Moves"][2], nil, flat_gauges==1)
               txt = string.lpad(v["info"]["mv"],5,' ')--.."/"..string.rpad(v["info"]["mmv"],5,' ')
               if overlay_numbers == 1 then
                  txtlen = WindowTextWidth(win,font_id,txt)
                  outlined_text(win, font_id, txt, x+((compact_bar_width-txtlen)/2)+(GAP), y, 0, 0, text_colour, utf8)
               else
                  WindowText(win, font_id, txt, baseX+compact_bar_width+(2*GAP), y, 0, 0, text_colour, utf8)
               end
               y = y + line_height+1
            end
            y = y + GAP - 2            
            WindowLine(win, baseX-GAP, y, baseX+column_width-GAP+1, y, text_colour, 0, 1) -- horizontal line
            WindowLine(win, baseX+column_width-GAP, baseY-GAP+2, baseX+column_width-GAP, y, text_colour, 0, 1) -- vertical line                  
         end
         else
            local baseX = GAP
            local baseY = title_height
            column_width = WindowTextWidth(win, font_id, "WWWWWWWWWWWW")+GAP*4

            num_columns = math.max(math.floor(width / column_width), 1)            

            bar_width = column_width  - GAP*2--*4 -- - labels_width
            for i,v in spairs(group_data["members"], function(t,a,b) return group_order[t[a].name] < group_order[t[b].name] end) do                           
               local player_column = group_order[v.name] % num_columns
               if player_column == 0 then player_column = num_columns end            
               if (player_column ~= 1) then                                                            
                  y = baseY
                  baseX = baseX + column_width
                  x = baseX
               else    
                  baseX = GAP           
                  baseY = y + GAP-1
                  y = baseY 
                  x = baseX
               end 

               -- txt = "["..(("P" and v["info"]["status"]["poisoned"] == true) or "_")..
               --     (("B" and v["info"]["status"]["blind"] == true) or "_")..
               --     (("W" and v["info"]["status"]["webbed"] == true) or "_")..
               --     (("C" and v["info"]["status"]["cursed"] == true) or "_")..
               --     (("*" and v["info"]["status"]["attacked"] == true) or "_").."]"
               -- WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8)
               -- x = x + math.max(WindowTextWidth(win, font_id, "[PBWC*]"), WindowTextWidth(win, font_id, "[_____]")) + GAP

               text_colour = ((v.info.here == "1" and 0xeeeeee) or (0x999999))

               if show_hp == 1 then -- HP BAR
                  y = y + line_height + 1
                  x = baseX

                  local hpColor1 = ""
                  local hpColor2 = ""

                  if v["info"]["here"] == "1" then
                     hpColor1 = colorVals["Health"][1]
                     hpColor2 = colorVals["Health"][2]
                  else
                     hpColor1 = 0x006400--"0x71B33C"
                     hpColor2 = "0x578B2E"
                  end

                  local hpPercent = 100
                  if tonumber(v["info"]["hp"]) and tonumber(v["info"]["mhp"]) then
                     hpPercent = 100* (tonumber(v["info"]["hp"]) / tonumber(v["info"]["mhp"]))
                  end

                  if thresh1active == 1 then
                     if hpPercent < thresh1percent then
                        if v["info"]["here"] == "1" then
                           hpColor1 = thresh1color
                           hpColor2 = thresh1color
                        else
                           hpColor1 = 0x0B86B8
                           hpColor2 = 0x8CE6F0
                        end
                     end
                  end
                  if thresh2active == 1 then
                     if hpPercent < thresh2percent then
                        if v["info"]["here"] == "1" then
                           hpColor1 = thresh2color
                           hpColor2 = thresh2color
                        else
                           hpColor1 = 0x00008B
                           hpColor2 = 0x2D52A0
                        end
                     end
                  end

                  gauge(win, v["name"].."'s HP", tonumber(v["info"]["hp"]), tonumber(v["info"]["mhp"]), x, y-line_height, bar_width, line_height*2, hpColor1, 0x000000, 0, 0x000000, hpColor2, nil, flat_gauges==1)
                  if (v["info"]["mhp"]-v["info"]["hp"]) > 0 then
                     txt = "-" .. v["info"]["mhp"]-v["info"]["hp"] --string.lpad(v["info"]["hp"], 5, ' ').."/"..string.rpad(v["info"]["mhp"],5,' ')
                  else
                     txt = ""
                  end
                  txtlen = WindowTextWidth(win,font_id,txt)
                  outlined_text(win, font_id, txt, baseX+((bar_width-txtlen)/2)+(GAP), y, 0, 0, text_colour, utf8)
               end

               txt = string.lpad("", 3, ' ') -- "["..string.lpad(v["info"]["lvl"], 3, ' ').."]"
               x = x + WindowText(win, font_id, txt, x, y-line_height, 0, 0, text_colour, utf8) + GAP
               txt = string.rpad(string.sub(v["name"], 0, 7), 12, ' ')
               zeroed_alignment = v["info"]["align"]+2500
               name_colour = ((zeroed_alignment<=1625 and colorVals["Align"][1]) or ((zeroed_alignment>=3375 and colorVals["Align"][2]) or 0xeeeeee))
               x = x + WindowText(win, font_id, txt, x, y-line_height, 0, 0, name_colour, utf8) + GAP
               y = y + line_height + 1

               if show_mn == 1 then-- MANA BAR
                  x = baseX
                  gauge(win, v["name"].."'s MN", tonumber(v["info"]["mn"]), tonumber(v["info"]["mmn"]), x, y, bar_width, line_height/2, colorVals["Mana"][1], 0x000000, 0, 0x000000, colorVals["Mana"][2], nil, flat_gauges==1)
                  --                 txt = string.lpad(v["info"]["mn"],5,' ').."/"..string.rpad(v["info"]["mmn"],5,' ')
                  --                    txtlen = WindowTextWidth(win,font_id,txt)
                  --                   outlined_text(win, font_id, txt, baseX+((bar_width-txtlen)/2)+(GAP), y, 0, 0, 0xeeeeee, utf8)
                  y = y + line_height/2 + 1
               end

               if show_mv == 1 then -- MOVES BAR
                  x = baseX
                  gauge(win, v["name"].."'s MV", tonumber(v["info"]["mv"]), tonumber(v["info"]["mmv"]), x, y, bar_width, line_height/2, colorVals["Moves"][1], 0x000000, 0, 0x000000, colorVals["Moves"][2], nil, flat_gauges==1)
                  --                 txt = string.lpad(v["info"]["mv"],5,' ').."/"..string.rpad(v["info"]["mmv"],5,' ')
                  --                    txtlen = WindowTextWidth(win,font_id,txt)
                  --                   outlined_text(win, font_id, txt, baseX+((bar_width-txtlen)/2)+(GAP), y, 0, 0, 0xeeeeee, utf8)
                  y = y + line_height/2+1
               end

               y = y + GAP - 2            
               WindowLine(win, baseX-GAP, y, baseX+column_width-GAP+1, y, text_colour, 0, 1) -- horizontal line
               WindowLine(win, baseX+column_width-GAP, baseY-GAP+2, baseX+column_width-GAP, y, text_colour, 0, 1) -- vertical line
            end
       end
      else
         txt = "Your group is empty."
         txtlen = WindowTextWidth(win,font_id, txt)
         WindowText(win, font_id, txt, (width-txtlen)/2, (height+line_height)/2, 0, 0, 0xeeeeee, utf8)
      end
   end

   -- draw edge frame.
   WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15)
   WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, 0xffffff, 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, 0x696969, 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, 0xffffff, 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, 0x696969, 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, 0xffffff, 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, 0x696969, 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, 0xffffff, 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, 0x696969, 0, 1)

   BroadcastPlugin (999, "repaint")

end -- Display_Group_Page

function validate_percent(input)
   if string.sub(input, -1) == "%" then
      input = string.sub(input, 1,-2)
   end
   local inputNum = tonumber(input)
   if not inputNum or inputNum < 1 or inputNum > 100 or inputNum % 1 ~= 0 then
      ColourNote("white","red","'"..input.."' is not a whole number between 1 and 100. Try again.")
      return false
   end
   return true
end

function right_click_menu ()

   menustring ="!Change Font|>Show Players|"..((show_self==1 and "+") or "").."Include Self|All Others|No Others|-|"
   local member_count = 0
   local member_names = {}
   if full_group_data and full_group_data["members"] and char_data and char_data["name"] then
      for i,v in ipairs(full_group_data["members"]) do
         if v["name"] ~= char_data["name"] then
            menustring = menustring..(((hidden_members[v["name"]] == nil) and "+") or "")..v["name"].."|"
            member_count = member_count + 1
            table.insert(member_names, v["name"])
         end
      end
   end
   menustring = menustring.."<|-|>Configure Colors|>Health|Main|Border|<|>Mana|Main|Border|<|>Moves|Main|Border|<|>Align|Evil|Good|<|<|>Show Info|"..((show_hp==1 and "+") or "").."Health|"..((show_mn==1 and "+") or "").."Mana|"..((show_mv==1 and "+") or "").."Moves|<|"..((flat_gauges==1 and "+") or "").."Use Flat Gauges|"..((overlay_numbers==1 and "+") or "").."Overlay Numbers|>HP Thresholds|>First|"..(((thresh1active == 1) and "+") or "").."Activate|Set Percent ("..thresh1percent.."%)|Set Color ("..RGBColourToName(thresh1color)..")|<|>Second|"..(((thresh2active == 1) and "+") or "").."Activate|Set Percent ("..thresh2percent.."%)|Set Color ("..RGBColourToName(thresh2color)..")|<|<|-|Bring To Front|Send To Back|-|Reset Defaults"
   result = WindowMenu (win,
      WindowInfo (win, 14),  -- x position
      WindowInfo (win, 15),   -- y position
      menustring) -- content

   if result ~= "" then
      numResult = tonumber(result)
      if numResult == 1 then
         -- change font
         wanted_font = utils.fontpicker (font_name, font_size) --font dialog
         if wanted_font then
            font_name = wanted_font.name
            font_size = wanted_font.size
         end
      elseif numResult == 2 then
         -- show/hide self
         show_self = (((show_self == 0) and 1) or 0)
         if (show_self == 0) then
            ColourNote("yellow", "", "You will no longer see your own status in the group monitor.")
         else
            ColourNote("yellow", "", "You will now see your own status in the group monitor.")
         end
      elseif numResult == 3 then
         -- remove all from the hidden list
         hidden_members = {}
      elseif numResult == 4 then
         -- add all to the hidden list
         hideAllMembers()
      elseif numResult >= 5 and numResult <= member_count+4 then
         -- add/remove members in the hidden list
         local adjustedNumResult = numResult - 4
         hidden_members[member_names[adjustedNumResult]] = (((hidden_members[member_names[adjustedNumResult]]== nil) and true) or nil)
      elseif numResult >= member_count+5 and numResult <= member_count+12 then
         -- change color settings
         local adjustedNumResult = numResult-member_count-4
         local colourIndex = 2
         if (adjustedNumResult % 2 == 1) then
            colourIndex = 1
         end
         local newcolour = PickColour (colorVals[barIndex[math.ceil(adjustedNumResult/2)]][colourIndex])
         if newcolour ~= -1 then
            colorVals[barIndex[math.ceil(adjustedNumResult/2)]][colourIndex] = newcolour
         end
      elseif numResult == member_count+13 then
         -- show/hide HP info
         show_hp = (((show_hp == 0) and 1) or 0)
         if (show_hp == 0) then
            ColourNote("yellow", "", "You will no longer see HP info in the group monitor.")
         else
            ColourNote("yellow", "", "You will now see HP info in the group monitor.")
         end
      elseif numResult == member_count+14   then
         -- show/hide MANA info
         show_mn = (((show_mn == 0) and 1) or 0)
         if (show_mn == 0) then
            ColourNote("yellow", "", "You will no longer see MN info in the group monitor.")
         else
            ColourNote("yellow", "", "You will now see MN info in the group monitor.")
         end
      elseif numResult == member_count+15 then
         -- show/hide MOVES info
         show_mv = (((show_mv == 0) and 1) or 0)
         if (show_mv == 0) then
            ColourNote("yellow", "", "You will no longer see MV info in the group monitor.")
         else
            ColourNote("yellow", "", "You will now see MV info in the group monitor.")
         end
      elseif numResult == member_count+16 then
         -- use flat/shaded gauges
         flat_gauges = (((flat_gauges == 0) and 1) or 0)
      elseif numResult == member_count+17 then
         -- toggle overlay numbers on top of gauges
         overlay_numbers = (((overlay_numbers == 0) and 1) or 0)
      elseif numResult == member_count+18 then
         thresh1active = (((thresh1active == 0) and 1) or 0)
      elseif numResult == member_count+19 then
         local perc = utils.inputbox( "I want the HP bars to change color when they drop below this percent...\n(enter a whole number between 1 and 100)", "Group Monitor HP Threshold #1", thresh1percent, nil, nil, {validate=validate_percent})
         if perc then
            if string.sub(perc, -1) == "%" then
               perc = string.sub(perc, 1,-2)
            end
            thresh1percent = tonumber(perc)
         end
      elseif numResult == member_count+20 then
         local newColor = PickColour (thresh1color)
         if newcolor ~= -1 then
            thresh1color = newColor
         end
      elseif numResult == member_count+21 then
         thresh2active = (((thresh2active == 0) and 1) or 0)
      elseif numResult == member_count+22 then
         local perc = utils.inputbox( "I want the HP bars to change color when they drop below this percent...\n(enter a whole number between 1 and 100)", "Group Monitor HP Threshold #2", thresh2percent, nil, nil, {validate=validate_percent})
         if perc then
            if string.sub(perc, -1) == "%" then
               perc = string.sub(perc, 1,-2)
            end
            thresh2percent = tonumber(perc)
         end
      elseif numResult == member_count+23 then
         local newColor = PickColour (thresh2color)
         if newcolor ~= -1 then
            thresh2color = newColor
         end
      elseif numResult == member_count+24 then
         -- bring to front
         CallPlugin("462b665ecb569efbf261422f","boostMe", win)
      elseif numResult == member_count+25 then
         -- send to back
         CallPlugin("462b665ecb569efbf261422f","dropMe", win)        
      elseif numResult == member_count+26 then
         -- reset
         font_name        = default_font_name
         font_size        = default_font_size
         height           = default_height
         width            = default_width
         show_coords      = 0
      end -- if

      RemoveMembersFromGroupDisplay()
      -- save and reload
      OnPluginSaveState()
      OnPluginInstall()
   end
end -- right_click_menu

invitations = {}

function group_invite(name, line, wildcards, styles)
   invitations[wildcards[1]]=wildcards[2]
   DisplayGroupPage()
end

function group_cancel(name, line, wildcards, styles)
   invitations[wildcards[1]] = nil
   DisplayGroupPage()
end

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         group_built = false
         self_built = false
         return
      end

      if (text=="char.base") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.base")
         luastmt = "char_data = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         self_built = true
         if group_built then
            RemoveMembersFromGroupDisplay()
            DisplayGroupPage()
         end
      end

      if (text == "group") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","group")
         luastmt = "full_group_data = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         if (full_group_data.groupname == "") then
            leaveGroup()
         else
            group_built = true
            if self_built then
               RemoveMembersFromGroupDisplay()
               DisplayGroupPage()
            else
               Send_GMCP_Packet("request char")
            end
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   end
end

function ResizeMoveCallback()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_SIZE) then
      width = MIN_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end 

   height = height + posy - starty
   starty = posy
   local min_lines = 1
   if show_hp == 1 then
      min_lines = min_lines + 1
   end
   if show_mn == 1 then
      min_lines = min_lines + 1
   end
   if show_mv == 1 then
      min_lines = min_lines + 1
   end
   if (height < title_height+(min_lines*line_height)+(2*GAP)+min_lines-1) then
      height = title_height+(min_lines*line_height)+(2*GAP)+min_lines-1
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   if (utils.timer() - lastRefresh > 0.0333) then
      SetUpHotspotsAndDraw(false)
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

function ResizeReleaseCallback()
    SetUpHotspotsAndDraw(true)
end

function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end

function CancelMouseOver (flags, hotspotid)
end -- cancelmouseover

function CancelMouseDown(flags, hotspot_id)
end

function MouseUp(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function leaveGroup ()
   invitations = {}
   group_built = false
   full_group_data = {}
   group_data = {}
   SetUpHotspotsAndDraw(true)
end

function ShowOrder()
   for player, order in spairs(group_order, function(t,a,b) return t[a] < t[b] end) do
      ColourNote("orange", "", string.lpad(tostring(order), 3, ' '), "gray", "", "|", "orange", "", player)
   end
end

function SetPlayerOrder(name, line, wildcards)      
   local oldPosition = 0
   local newPosition = tonumber(wildcards[1])
   local matchingPlayer = ""

   -- iterate over the members to find the matching player
   for player, order in pairs(group_order) do
         if string.find(string.lower(player), string.lower(wildcards[2])) ~= nil then
            matchingPlayer = player
            oldPosition = order
         end
   end

   if matchingPlayer ~= "" then      
      if newPosition > oldPosition then
         -- player moved down in order
         -- everyone between the old position and the new position needs to move up 1
         for player, order in pairs(group_order) do
            if player == matchingPlayer then 
               group_order[player] = newPosition
            elseif order > oldPosition and order <= newPosition then
               group_order[player] = group_order[player] - 1
            end
         end
      elseif newPosition < oldPosition then
         -- player moved up in order
         -- everyone from the new position to the old position needs to move down 1
         for player, order in pairs(group_order) do
            if player == matchingPlayer then 
               group_order[player] = newPosition
            elseif order >= newPosition and order < oldPosition then
               group_order[player] = group_order[player] + 1
            end
         end
      end
   else 
      Note("matching player not found")
   end

   ColourNote("orange", "", matchingPlayer .. " moved from ", "cyan", "", tostring(oldPosition), "orange", "", " to ", "cyan", "", tostring(newPosition))   
   DisplayGroupPage()
end

function SetPlayerOrderTop(name, line, wildcards)
   wildcards[2] = wildcards[1]
   wildcards[1] = "1"
   SetPlayerOrder(name, line, wildcards)
end

function SetPlayerOrderBottom(name, line, wildcards)
   wildcards[2] = wildcards[1]

   count = 0
   for _ in pairs(group_order) do count = count + 1 end
   wildcards[1] = count

   SetPlayerOrder(name, line, wildcards)
end

function ReOrderGroup()
   local lastPosition = 1
   for player, order in spairs(group_order, function(t,a,b) return t[a] < t[b] end) do
      group_order[player] = lastPosition
      lastPosition = lastPosition + 1
   end
end

function OnPluginConnect()
   Send_GMCP_Packet("rawcolor on")
   Send_GMCP_Packet("group on")
end

function OnPluginSaveState ()
   -- save window current location for next time  
   movewindow.save_state (win)

   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
   SetVariable ("background_colour", background_colour)
   SetVariable ("title_colour", title_colour)  
   SetVariable ("width", width)
   SetVariable ("height", height)
   SetVariable ("font_name", font_name)
   SetVariable ("font_size", font_size)
   SetVariable ("show_self", show_self)
   SetVariable ("show_hp", show_hp)
   SetVariable ("show_mn", show_mn)
   SetVariable ("show_mv", show_mv)
   SetVariable ("hidden", hidden)
   SetVariable ("colorVals", serialize.save ("colorVals"))
   SetVariable ("flat_gauges", flat_gauges)
   SetVariable ("overlay_numbers", overlay_numbers)
   SetVariable ("thresh1active", thresh1active)
   SetVariable ("thresh2active", thresh2active)
   SetVariable ("thresh1percent", thresh1percent)
   SetVariable ("thresh2percent", thresh2percent)
   SetVariable ("thresh1color", thresh1color)
   SetVariable ("thresh2color", thresh2color)
end -- OnPluginSaveState

function OnPluginClose ()
   OnPluginDisable()
   WindowDelete(win)
end

function HideIt()
   WindowShow( win, false )
   hidden = 1
   OnPluginSaveState()
end

function ShowIt()
   WindowShow (win, true)
   hidden = 0
   OnPluginSaveState()
end

function OnPluginDisable ()
   OnPluginSaveState()
   WindowShow(win, false)
end --  OnPluginDisable

function OnPluginEnable ()
   if hidden == 0 then
      WindowShow (win, true)
   end
   if IsConnected() then
      OnPluginConnect()
   end
   OnPluginSaveState()
end -- OnPluginEnable

win = GetPluginID()
require "checkplugin"
function OnPluginListChanged ()
   do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
   do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
   do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor") -- check we have z order plugin
end -- OnPluginListChanged

function OnPluginInstall()
   -- make window so I can grab the font info
   WindowCreate (win, width, height, 1, 1, 0, 0, background_colour) 

   font_id        = "font"
   font_id_bold   = "font_bold"

   local fonts = utils.getfontfamilies ()

   -- if not there already, add it
   if not fonts.Dina then
      AddFont (GetInfo (66) .. "\\Dina.fon")
      fonts = utils.getfontfamilies ()
   end -- if Dina not installed

   if fonts ["Dina"] then
      default_font_size = 8
      default_font_name = "Dina"    -- the actual font
   elseif fonts["Courier New"] then
      default_font_size = 9
      default_font_name = "Courier New"
   else
      default_font_size = 9
      default_font_name = "Lucida Console"
   end -- if

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   --- Load the fonts into the temp window.
   WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font
   WindowFont (win, font_id_bold, font_name, font_size+1, false, false, false, false) -- bold font

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
   line_height = font_height + 1
   title_height = line_height*1+3

   --- install the window movement handler, get back the window position.
   windowinfo = movewindow.install (win, miniwin.pos_center, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})
   
   if IsConnected() then
      OnPluginConnect()
      Send_GMCP_Packet("request group")
   end
   
   -- if disabled last time, stay disabled
   if GetVariable ("enabled") == "false" then
      ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
      check (EnablePlugin(GetPluginID (), false))
      return
   end -- they didn't enable us last time

   -- Draw the initial group window
   SetUpHotspotsAndDraw(true)
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

function spairs(t, order)
         -- collect the keys
         local keys = {}
         for k in pairs(t) do keys[#keys+1] = k end

         -- if order function given, sort by it by passing the table and keys a, b,
         -- otherwise just sort the keys 
         if order then
            table.sort(keys, function(a,b) return order(t, a, b) end)
         else
            table.sort(keys)
         end

         -- return the iterator function
         local i = 0
         return function()
            i = i + 1
            if keys[i] then
               return keys[i], t[keys[i]]
            end
         end
      end

]]>

</script>
</muclient>
