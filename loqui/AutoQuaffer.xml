<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, April 08, 2014, 11:31 PM -->
<!-- MuClient version 4.91 -->

<!-- Plugin "AutoQuaffer" generated by Plugin Wizard -->

<muclient>
    <plugin name="AutoQuaffer" author="Crowley" id="333b19301411739ed2008d06" language="Lua" purpose="Automatically quaffs potions" save_state="y" date_written="2014-04-08 23:30:12" requires="4.80" version="2.0">

    </plugin>

    <!--  Triggers  -->

    <triggers>
        <trigger enabled="y" group="AutoQuaff" match="^(?:\[\d\] )?You feel much better\..*?" regexp="y" send_to="12" sequence="100">
            <send>SetVariable("AutoHeal",1)</send>
        </trigger>
        <trigger enabled="y" group="AutoQuaff" match="^(?:\[\d\] )?A warm feeling fills your body\..*?" regexp="y" send_to="12" sequence="100">
            <send>SetVariable("AutoHeal",1)</send>
        </trigger>
        <trigger enabled="y" group="AutoQuaff" match="^(?:\[\d\] )?(?:A great healing power courses through your veins leaving you greatly regenerated\.|The life within you is renewed\.).*?" regexp="y" send_to="12" sequence="100">
            <send>SetVariable("AutoHeal",1)</send>
        </trigger>
        <trigger enabled="y" group="AutoQuaff" match="^You are greatly healed by your magic touch.*" regexp="y" send_to="12" sequence="100">
            <send>SetVariable("AutoHeal",1)</send>
        </trigger>
        <trigger enabled="y" group="AutoQuaff" match="^(?:\[\d\] )?Wow[\.]+what a rush\!.*?" regexp="y" send_to="12" sequence="100">
            <send>SetVariable("AutoMana",1)</send>
        </trigger>
        <trigger enabled="y" group="AutoQuaff" match="^(?:\[\d\] )?You feel less tired\..*?" send_to="12" regexp="y" sequence="100">
            <send>SetVariable("AutoMove",1)</send>
        </trigger>
        <trigger enabled="y" group="AutoQuaff" match="^You die\.$" send_to="12" regexp="y" sequence="100">
            <send>SetVariable("AutoHeal",1)
            SetVariable("AutoMana", 1)
            SetVariable("AutoMove", 1)</send>
        </trigger>
    </triggers>

    <!--   Aliases   -->
    <aliases>
        <alias match="quaffer (on|off)" enabled="y" group="AutoQuaff" regexp="y" script="quaffToggle" sequence="100">
        </alias>
        <alias match="^setthresh (hp|mn|mv) (\d+)$" enabled="y" group="AutoQuaff" regexp="y" script="setThresh" sequence="100">
        </alias>
        <alias match="^setcmd (hp|mn|mv) (.*)$" enabled="y" group="AutoQuaff" regexp="y" script="setCommand" sequence="100">
        </alias>
        <alias match="quaffer help" enabled="y" group="AutoQuaff" script="onHelp" sequence="100">
        </alias>
    </aliases>

    <!--  Script  -->


    <script>
        <![CDATA[
    require 'gmcphelper'
    SetVariable("canQuaff", 1)

    healCmd = GetVariable("healCmd") or "hp"
    manaCmd = GetVariable("manaCmd") or "mp"
    moveCmd = GetVariable("moveCmd") or "mvp"

    hpthresh = tonumber(GetVariable("hpthreshold")) or 50
    mnthresh = tonumber(GetVariable("mnthreshold")) or 50
    mvthresh = tonumber(GetVariable("mvthreshold")) or 50
    aheal = tonumber(GetVariable("AutoHeal")) or 1
    amana = tonumber(GetVariable("AutoMana")) or 1
    amove = tonumber(GetVariable("AutoMove")) or 1

    hppct = 100
    mnpct = 100
    mvpct = 100
    state = 3

    function setCommand(name, line, args)
        local settype, cmd, typetable = args[1], args[2], {hp = "healCmd", mn = "manaCmd", mv = "moveCmd"}

        if typetable[settype] then
            SetVariable(typetable[settype], cmd)
            ColourNote("yellow", "firebrick", "*** AutoQuaff: Setting " .. settype .. " command to " .. cmd)
            _G[typetable[settype]] = cmd
        else
            ColourNote("yellow", "firebrick", "*** AutoQuaff: Wrong type selected. Please use hp, mn, or mv.")
        end
    end


    function quaffToggle(name, line, args)
        str = args[1]

        if str:upper() == "ON" then
            SetVariable("canQuaff", 1)
        elseif str:upper() == "OFF" then
            SetVariable("canQuaff", 0)
        end

        ColourNote("yellow", "firebrick", "*** AutoQuaff: Turned " .. str:upper())
    end

    function setThresh(name, line, args)
        local set, amt = args[1] .. "threshold", args[2]

        SetVariable(set, tonumber(amt))

        ColourNote("yellow", "firebrick", "*** AutoQuaff: Setting " .. set .. " to " .. amt .. "%")
    end

    function getPercent(str)
        local current, max = tonumber(gmcp("char.vitals." .. str)) or 100, tonumber(gmcp("char.maxstats.max" .. str)) or 100
        return (current/max)*100
    end

    function quaffPot()
        if gmcp("char.vitals") then
            hppct = getPercent("hp") or 100
            mnpct = getPercent("mana") or 100
            mvpct = getPercent("moves") or 100

            state = tonumber(gmcp("char.status.state"))

            hpthresh = tonumber(GetVariable("hpthreshold")) or 50
            mnthresh = tonumber(GetVariable("mnthreshold")) or 50
            mvthresh = tonumber(GetVariable("mvthreshold")) or 50

            aheal = tonumber(GetVariable("AutoHeal")) or 1
            amana = tonumber(GetVariable("AutoMana")) or 1
            amove = tonumber(GetVariable("AutoMove")) or 1

            if hppct<= hpthresh and aheal == 1 and state == 8 then
                SetVariable("AutoHeal", 0)
                Execute(healCmd)
            end

            if mnpct <= mnthresh and amana == 1 then
                SetVariable("AutoMana", 0)
                Execute(manaCmd)
            end

            if mvpct <= mvthresh and amove == 1 then
                SetVariable("AutoMove", 0)
                Execute(moveCmd)
            end
        else
            DoAfterSpecial(5, 'Send("protocol gmcp sendchar")', 12)
        end
    end

    function OnPluginBroadcast(msg, id, name, text)
        if (id == '3e7dedbe37e44942dd46d264') then
            if (text:match("char.vitals")) then
                if tonumber(GetVariable("canQuaff")) == 1 then
                    quaffPot()
                end
            end
        end
    end

    function help_wrap(str, limit, indent, indent1)
        indent = indent or ""
        indent1 = indent1 or indent
        limit = limit or 76
        local here = 1-#indent1
        local last_color = ''
        return indent1..str:gsub("(%s+)()(%S+)()",
            function(sp, st, word, fi)
            local delta = 0
            here = here + delta
            if fi-here > limit then
                here = st - #indent + delta
                return "\n" .. word
            end
            end)
    end

    function onHelp()
        ColourNote("cyan", "", "----------------------------------------------------------------------------")
        ColourNote("darkcyan", "", "Plugin name", "antiquewhite", "", " : AutoQuaffer")
        ColourNote("darkcyan", "", "Created by ", "antiquewhite", "", " : Crowley")
            ColourNote("darkcyan", "", "Commands   ", "antiquewhite", "", " : quaffer, setcmd, setthresh")
        ColourNote("cyan", "", "----------------------------------------------------------------------------")
        print()
        ColourNote("yellow", "", "Syntax", "antiquewhite", "", ": quaffer <on|off>")
        print()
        ColourNote("antiquewhite", "", unpack({help_wrap("Turns quaffing on or off as needed.")}))
        print()
        print()
        ColourNote("yellow", "", "Syntax", "antiquewhite", "", ": setcmd <hp|mn|mv> <command>")
        print()
        ColourNote("antiquewhite", "", unpack({help_wrap("Allows you to change commands on the fly to whatever your needs are at the time. For example, if you're using Durel's DINV plugin, you can set it to use 'dinv consume'. Or if you just scribed a bunch of incomplete healing scrolls, you can set it to 'recite incomplete'. ")}))
        print()
        print()
        ColourNote("yellow", "", "Syntax", "antiquewhite", "", ": setthresh <hp|mn|mv> <percentage>")
        print()
        ColourNote("antiquewhite", "", unpack({help_wrap("Allows you to set a threshhold limit before it takes action. For example, if you want it to send your mana command every time you reach 20% mana, you can do 'setthresh mn 20'.")}))
        print()
        print()
        ColourNote("antiquewhite", "", unpack({help_wrap("Please use this with care. Do not go to an aggro room, turn the plugin on, and let aggros respawn and attack. That is considered botting, and is not tolerated. Any questions, don't hesitate to ask or drop me a note!")}))
        ColourNote("cyan", "", "----------------------------------------------------------------------------")
    end
]]>
    </script>


</muclient>
