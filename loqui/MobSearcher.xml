<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, August 07, 2018, 8:01 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "MobSearcher" generated by Plugin Wizard -->

<muclient>
<plugin
   name="MobSearcher"
   author="Crowley"
   id="e82ebcf030374db64d3972ed"
   language="Lua"
   purpose="Searches mobs.db for mobs"
   save_state="y"
   date_written="2018-08-07 19:59:38"
   requires="4.00"
   version="1.0"
   >

</plugin>

<!--  Aliases  -->

<aliases>
  <alias
   match="^m(?:ob)?s(?:earch)? ([\p{P}\w]+)(?:\s([^0-9]+))?(?:\s+(\d+))?$"
   enabled="y"
   group="Mob_Database"
   regexp="y"
   script="onSearch"
   sequence="100"
  >
  </alias>
  <alias
   match="^mdadd (.*)$"
   enabled="y"
   group="Mob_Database"
   regexp="y"
   script="addMob"
   sequence="100"
  >
  </alias>
  <alias
   match="^mddel (.*?)(?:\s?(all|confirm))?$"
   enabled="y"
   group="Mob_Database"
   regexp="y"
   script="deleteMob"
   sequence="100"
  >
  </alias>
  <alias
   match="^mshow (\d+) (.*)$"
   enabled="y"
   group="Mob_Database"
   regexp="y"
   script="mobShow"
   sequence="100"
  >
  </alias>
  <alias
   match="^mgo(?:to)? (\d+)$"
   enabled="y"
   group="Mob_Database"
   regexp="y"
   script="mobGo"
   sequence="100"
  >
  </alias>    
</aliases>

<!--  Script  -->


<script>
<![CDATA[
require 'gmcphelper'
mshow = {}
showstr = "@W%s @wis found in @Y%s @win/around (@Cmapper goto %s@w)"

function help_wrap(str, limit, indent, indent1)
   indent = indent or ""
   indent1 = indent1 or indent
   limit = limit or 76
   local here = 1-#indent1
   local last_color = ''
   return indent1..str:gsub("(%s+)()(%S+)()",
     function(sp, st, word, fi)
       local delta = 0
       here = here + delta
       if fi-here > limit then
         here = st - #indent + delta
         return "\n" .. word
       end
    end)
end

function searchMobs(mobn, areaz, lvl)
    mobsdb = sqlite3.open(GetInfo(66) .. "databases/mobs.db")
    mshow = {}

    if areaz:upper() == "HERE" then
        areaz = gmcp("room.info.zone")
    end

    local mname, rname, rid, zname, failure, bgcolor = "", "", "", "", "No matches found", ""
    local sqlquery = "SELECT * FROM mobs WHERE mob LIKE '%" .. mobn:gsub("'", "''") .. "%'"
    local searchmsg = "Searching for " .. mobn
       
    if areaz:upper() ~= "ALL" then
        sqlquery = sqlquery .. " AND zone = '" .. areaz .. "'"
        searchmsg = searchmsg .. " in " .. areaz
    end

    if lvl then
        searchmsg = searchmsg .. " at level " .. lvl
        local areas = {}
        local lvlquery = "SELECT zone_name FROM area where min_lvl <= " .. lvl .. " AND max_lvl >= " .. lvl

        for b in mobsdb:rows(lvlquery) do
            if #areas == 0 then
                table.insert(areas, " AND (zone = '" .. b[1] .. "'")
            else
                table.insert(areas, "OR zone = '" .. b[1] .. "'")
            end
        end
        sqlquery = sqlquery .. table.concat(areas, " ") .. ")"
    end

    local dividers = "+" .. string.rep("-", 30) .. "+" .. string.rep("-", 25) .. "+" .. string.rep("-", 13) .. "+" .. string.rep("-", 12) .. "+"
    
    
    ColourNote("orange", "", searchmsg .. "...")
    ColourNote("magenta", "", dividers)
    
    ColourNote("magenta", "", "| ", "white", "", "Mob name" .. string.rep(" ", 28-#"Mob name"), "magenta", "", " | ", "green", "", "Room name" .. string.rep(" ", 23-#"Room name"), "magenta", "", " | ", "cyan", "", "ID" .. string.rep(" ", 11-#"ID"), "magenta", "", " | ", "yellow", "", "Zone" .. string.rep(" ", 10-#"Zone"), "magenta", "", " |")

    ColourNote("magenta", "", dividers)

     local count = 0

    for a in mobsdb:rows(sqlquery) do
        count = count + 1
        if #a > 0 then
            mname, rname, rid, zname = count .. ". " .. a[1], a[2], tostring(a[3]), a[4]
            if #mname > 28 then
                mname = string.sub(mname, 1, 28)
            end

            if #rname > 23 then
                rname = string.sub(rname, 1, 23)
            end

            ridstr = count .. ". " .. rid

            bgcolor = "black"

            if count%2 == 0 then
                bgcolor = "navy"
            end
        
        table.insert(mshow, {a[1], zname, rid})

        ColourTell("magenta", "", "|", "white", bgcolor, " " .. string.format("%-29s",mname), "magenta", "", "|", "limegreen", bgcolor, " " .. string.format("%-24s", rname), "magenta", "", "|", "cyan", bgcolor, " " .. count .. ". ")
        Hyperlink("mapper goto " .. rid, rid, "goto id", "cyan", bgcolor, 0)
        ColourTell("", bgcolor,  string.rep(" ", 12-#ridstr),"magenta", "", "|", "yellow", bgcolor, " " .. string.format("%-11s", zname), "magenta", "", "|\n")
        end
    end

    if count == 0 then
        ColourNote("magenta", "", "| ", "tomato", "", string.format("%-81s", failure), "magenta", "", " |")
    end
     
     ColourNote("magenta", "", dividers)
     if count > 0 and count < 2 then
        ColourNote("orange", "", count .. " match found")
     elseif count > 1 then
        ColourNote("orange", "", count .. " matches found") 
     end

     mobsdb:close()
     mobsdb = nil
end

function onHelp()
    ColourNote("cyan", "", "----------------------------------------------------------------------------")
    ColourNote("darkcyan", "", "Plugin name", "antiquewhite", "", " : MobSearcher")
    ColourNote("darkcyan", "", "Created by ", "antiquewhite", "", " : Crowley")
    ColourNote("darkcyan", "", "Thanks to  ", "antiquewhite", "", " : Rauru")
    ColourNote("darkcyan", "", "Commands   ", "antiquewhite", "", " : msearch, mdadd, mddel")
    ColourNote("cyan", "", "----------------------------------------------------------------------------")
    print()
    ColourNote("yellow", "", "Syntax", "antiquewhite", "", ": msearch|ms|mobsearch <areaname|here|all> <mobname> <lvl>")
    ColourNote("cyan", "", "Shortcut", "antiquewhite", "", ": msearch|ms|mobsearch <mobname> <lvl> (defaults to all, can only accept one word)")
    print()
    ColourNote("antiquewhite", "", unpack({help_wrap("Using mobs.db, this plugin searches for mobs matching your mob name in the area you list, area you are in, or in all areas. You can limit this by adding a level (not level range, but you can use your level for reference). It returns a table of all matching mobs, giving the full mob name, the room it is in, the room id, and the zone. You can click on the room id to go directly to that room using the client's 'mapper goto' command. In future versions, there will be a way to add any mobs that you find along the way, and a note will be posted to advise of new updates.")}))
    print()
    ColourNote("antiquewhite", "", unpack({help_wrap("It must be noted that you must have the mobs.db in your MUSHclient folder, and you should create a new folder in your root folder called 'databases' and put the mobs.db database there. For example:")}))
    print()
    ColourNote("antiquewhite", "", "C:/MUSHClient/databases/mobs.db")
    print()
    print()
    ColourNote("yellow", "", "Syntax", "antiquewhite", "", ": mdadd <exact mob name>")
    print()
    ColourNote("antiquewhite", "", unpack({help_wrap("This command allows you to manually add a mob to the database. It will take the room you are currently in and apply it to the mob. For best results, it is recommended you use the exact mob name that you get from study or consider. It's not required, but it helps avoid confusion in the future.")}))
    print()
    print()
    ColourNote("yellow", "", "Syntax", "antiquewhite", "", ": mddel <exact mob name> <all>")
    print()
    ColourNote("antiquewhite", "", unpack({help_wrap("This command will delete a mob from the database provided it was recorded in the same room you are standing in. The 'all' parameter should be used with caution - it will delete every matching name (exact name only) from the database. It must be confirmed before it does any damage, however.")}))
    print()
    print()
    ColourNote("yellow", "", "Syntax", "antiquewhite", "", ": mshow <#> <channel>")
    print()
    ColourNote("antiquewhite", "", unpack({help_wrap("Displays a particular row number to the channel of your choice, displaying the mob location.")}))
    print()
    print()
    ColourNote("yellow", "", "Syntax", "antiquewhite", "", "mgo<to> <#>")
    print()
    ColourNote("antiquewhite", "", unpack({help_wrap("Attempts to run to the roomID in the row number supplied.")}))
    print()
    ColourNote("antiquewhite", "", "Any questions, don't hesitate to ask or drop me a note!")    
    ColourNote("cyan", "", "----------------------------------------------------------------------------")
end

function onSearch(name, line, wildcards)
    local param1, param2, param3 = wildcards[1], wildcards[2], wildcards[3]

    if string.upper(param1) == "HELP" then
        onHelp()
    else
        local zone, name, sendit = param1, param2, false

        if #name < 1 then
            name = zone
            zone = "all"
            sendit = true
        elseif #name >= 1 and #name < 2 then
            ColourNote("orange", "", "You need at least 2 characters of the mob name!")
        else
            sendit = true
        end

        if sendit then
            if param3 then
                searchMobs(name, zone, tonumber(param3))
            else
                searchMobs(name, zone)
            end
        else
             ColourNote("tomato", "", "Syntax error! Use: ", "green", "", "msearch <areakey|here|all> <mob>")
        end
    end
end

function strip_colours (s)
   s = s:gsub("@@", "\0")  -- change @@ to 0x00
   s = s:gsub("@%-", "~")    -- fix tildes (historical)
   s = s:gsub("@x%d?%d?%d?", "") -- strip valid and invalid xterm color codes
   s = s:gsub("@.([^@]*)", "%1") -- strip normal color codes and hidden garbage
   return (s:gsub("%z", "@")) -- put @ back (has parentheses on purpose)
end

function addMob(name, line, wildcards)
    local room, roomid, zone, found = gmcp("room.info.name"), gmcp("room.info.num"), gmcp("room.info.zone"), false

    local sqlquery = "SELECT * FROM mobs WHERE mob = '" .. wildcards[1]:gsub("'", "''") .. "' and roomid = " .. tonumber(roomid)

    local sqlinsert = "INSERT INTO mobs VALUES ('" .. wildcards[1]:gsub("'", "''") .. "','" .. strip_colours(room) .. "'," .. tonumber(roomid) .. ",'" .. zone .."')"

    mobsdb = sqlite3.open(GetInfo(66) .. "databases/mobs.db")

    for c in mobsdb:rows(sqlquery) do
        found = true
    end
    if not found then
        mobsdb:exec(sqlinsert)
        if mobsdb:changes() ~= 0 then
            ColourNote("cyan", "", "Mob added: ", "orange", "", wildcards[1] .. " in room " .. strip_colours(room) .. " (" .. roomid .. ")/" .. zone)
        else
            ColourNote("orange", "", "Mob not added. Something went wrong.")
        end
    else
        ColourNote("orange", "", "Mob already exists in database for this room.")
    end
    
    mobsdb:close()
    mobsdb = nil
end

function deleteMob(name, line, wildcards)
    local mobn, zone, roomid, room, sqlquery, sendit = wildcards[1], gmcp("room.info.zone"), gmcp("room.info.num"), gmcp("room.info.name"), "", false

    if wildcards[2]:upper() == "ALL" then
        ColourNote("orange", "", "This will delete ALL occurrences of " .. mobn .. " in the database (exact name only)! Type ", "green", "", " mddel " .. mobn .. " confirm", "orange", "", " to continue.")
    elseif wildcards[2]:upper() == "CONFIRM" then
        sqlquery = "DELETE FROM mobs where mob = '" .. mobn .. "'"
        sendit = true
    else
        sqlquery = "DELETE FROM mobs WHERE mob = '" .. mobn:gsub("'", "''") .. "' AND roomid = " .. tonumber(roomid)
        sendit = true
    end

    if sendit then
        mobsdb = sqlite3.open(GetInfo(66) .. "databases/mobs.db")
        mobsdb:exec(sqlquery)
    
        if mobsdb:changes() ~= 0 then
            if wildcards[2]:upper() == "CONFIRM" then
                ColourNote("cyan", "", "Mob deleted: ", "orange", "", "All occurrences of " .. mobn)
            else
                ColourNote("cyan", "", "Mob deleted: ", "orange", "", wildcards[1] .. " in room " .. strip_colours(room) .. " (" .. roomid .. ")/" .. zone)
            end
        else
            ColourNote("orange", "", "Mob not deleted. No record found for this room matching " .. mobn .. ".")
        end
        mobsdb:close()
        mobsdb = nil
    end
end

function mobShow(name, line, wildcards)
    if #mshow ~= 0  then
        mob, zone, rid = mshow[tonumber(wildcards[1])][1], mshow[tonumber(wildcards[1])][2], mshow[tonumber(wildcards[1])][3]
        Execute(wildcards[2] .. " " .. string.format(showstr, mob, zone, rid))
    else
        ColourNote("orange", "", "No results loaded. Try searching for your mob first.")
    end
end

function mobGo(name, line, wildcards)
    if #mshow ~= 0 then
        Execute("mapper goto " .. mshow[tonumber(wildcards[1])][3])
    else
        ColourNote("orange", "", "No results loaded. Try searching for your mob first.")
    end
end
]]> 
</script>

</muclient>
